{
  "hash": "e55506b1a66133c18bf6235cbed7729c",
  "result": {
    "markdown": "---\ntitle: \"Challenge4\"\nauthor: \"Danny Cam Hoa Tien\"\ndate: \"2023-05-23\"\noutput: html_document\n---\n\n\n\n\n## R Markdown\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-1_de8c510d1f138c217f31d2883a13eaee'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\n\n# libraries\nlibrary(rsample)\nlibrary(recipes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attache Paket: 'recipes'\n#> \n#> Das folgende Objekt ist maskiert 'package:stringr':\n#> \n#>     fixed\n#> \n#> Das folgende Objekt ist maskiert 'package:stats':\n#> \n#>     step\n```\n:::\n\n```{.r .cell-code}\nlibrary(PerformanceAnalytics)  # for skewness \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Lade nötiges Paket: xts\n#> Lade nötiges Paket: zoo\n#> \n#> Attache Paket: 'zoo'\n#> \n#> Die folgenden Objekte sind maskiert von 'package:base':\n#> \n#>     as.Date, as.Date.numeric\n#> \n#> \n#> ######################### Warning from 'xts' package ##########################\n#> #                                                                             #\n#> # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#> # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#> # source() into this session won't work correctly.                            #\n#> #                                                                             #\n#> # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#> # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#> # dplyr from breaking base R's lag() function.                                #\n#> #                                                                             #\n#> # Code in packages is not affected. It's protected by R's namespace mechanism #\n#> # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#> #                                                                             #\n#> ###############################################################################\n#> \n#> Attache Paket: 'xts'\n#> \n#> Die folgenden Objekte sind maskiert von 'package:dplyr':\n#> \n#>     first, last\n#> \n#> \n#> Attache Paket: 'PerformanceAnalytics'\n#> \n#> Das folgende Objekt ist maskiert 'package:graphics':\n#> \n#>     legend\n```\n:::\n\n```{.r .cell-code}\n# H2O modeling\nlibrary(h2o)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n#> \n#> \n#> Attache Paket: 'h2o'\n#> \n#> Die folgenden Objekte sind maskiert von 'package:lubridate':\n#> \n#>     day, hour, month, week, year\n#> \n#> Die folgenden Objekte sind maskiert von 'package:stats':\n#> \n#>     cor, sd, var\n#> \n#> Die folgenden Objekte sind maskiert von 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n```\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-2_119a28977b89285cf6e81c8fd7f209d8'}\n\n```{.r .cell-code}\n# Load data\n\n\nemployee_attrition_tbl <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndefinitions_raw_tbl    <- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n```\n:::\n\n```{.r .cell-code}\nView(definitions_raw_tbl)\n```\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-3_9a1349a18b0b374b287c35b40dff5fe2'}\n\n```{.r .cell-code}\nemployee_attrition_tbl %>% \n        ggplot(aes(Education)) +\n        geom_bar()\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n# Data preparation ----\n# Human readable\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-4_82e513beaa1bb5ad8fb81ed5983c6b7b'}\n\n```{.r .cell-code}\ndefinitions_tbl <- definitions_raw_tbl %>% \n  fill(...1, .direction = \"down\") %>%\n  filter(!is.na(...2)) %>%\n  separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %>%\n  rename(column_name = ...1) %>%\n  mutate(key = as.numeric(key)) %>%\n  mutate(value = value %>% str_replace(pattern = \"'\", replacement = \"\")) \ndefinitions_tbl\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"column_name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"key\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"value\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Education\",\"2\":\"1\",\"3\":\"Below College\"},{\"1\":\"Education\",\"2\":\"2\",\"3\":\"College\"},{\"1\":\"Education\",\"2\":\"3\",\"3\":\"Bachelor\"},{\"1\":\"Education\",\"2\":\"4\",\"3\":\"Master\"},{\"1\":\"Education\",\"2\":\"5\",\"3\":\"Doctor\"},{\"1\":\"EnvironmentSatisfaction\",\"2\":\"1\",\"3\":\"Low\"},{\"1\":\"EnvironmentSatisfaction\",\"2\":\"2\",\"3\":\"Medium\"},{\"1\":\"EnvironmentSatisfaction\",\"2\":\"3\",\"3\":\"High\"},{\"1\":\"EnvironmentSatisfaction\",\"2\":\"4\",\"3\":\"Very High\"},{\"1\":\"JobInvolvement\",\"2\":\"1\",\"3\":\"Low\"},{\"1\":\"JobInvolvement\",\"2\":\"2\",\"3\":\"Medium\"},{\"1\":\"JobInvolvement\",\"2\":\"3\",\"3\":\"High\"},{\"1\":\"JobInvolvement\",\"2\":\"4\",\"3\":\"Very High\"},{\"1\":\"JobSatisfaction\",\"2\":\"1\",\"3\":\"Low\"},{\"1\":\"JobSatisfaction\",\"2\":\"2\",\"3\":\"Medium\"},{\"1\":\"JobSatisfaction\",\"2\":\"3\",\"3\":\"High\"},{\"1\":\"JobSatisfaction\",\"2\":\"4\",\"3\":\"Very High\"},{\"1\":\"PerformanceRating\",\"2\":\"1\",\"3\":\"Low\"},{\"1\":\"PerformanceRating\",\"2\":\"2\",\"3\":\"Good\"},{\"1\":\"PerformanceRating\",\"2\":\"3\",\"3\":\"Excellent\"},{\"1\":\"PerformanceRating\",\"2\":\"4\",\"3\":\"Outstanding\"},{\"1\":\"RelationshipSatisfaction\",\"2\":\"1\",\"3\":\"Low\"},{\"1\":\"RelationshipSatisfaction\",\"2\":\"2\",\"3\":\"Medium\"},{\"1\":\"RelationshipSatisfaction\",\"2\":\"3\",\"3\":\"High\"},{\"1\":\"RelationshipSatisfaction\",\"2\":\"4\",\"3\":\"Very High\"},{\"1\":\"WorkLifeBalance\",\"2\":\"1\",\"3\":\"Bad\"},{\"1\":\"WorkLifeBalance\",\"2\":\"2\",\"3\":\"Good\"},{\"1\":\"WorkLifeBalance\",\"2\":\"3\",\"3\":\"Better\"},{\"1\":\"WorkLifeBalance\",\"2\":\"4\",\"3\":\"Best\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n# DATA PREPARATION ----\n# Human readable ----\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-5_4a49020c024235ee0dd3c7dbf5182f55'}\n\n```{.r .cell-code}\ndefinitions_list <- definitions_tbl %>% \n  \n  # Mapping over lists\n  \n  # Split into multiple tibbles\n  split(.$column_name) %>%\n  # Remove column_name\n  map(~ select(., -column_name)) %>%\n  # Convert to factors because they are ordered an we want to maintain that order\n  map(~ mutate(., value = as_factor(value))) \n  \n# definitions_list[[1]]\ndefinitions_list[[\"Education\"]]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"value\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"Below College\"},{\"1\":\"2\",\"2\":\"College\"},{\"1\":\"3\",\"2\":\"Bachelor\"},{\"1\":\"4\",\"2\":\"Master\"},{\"1\":\"5\",\"2\":\"Doctor\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n# Rename columns\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-6_fc8fe79dda7a1a3dd85f4a3c973d6c01'}\n\n```{.r .cell-code}\nfor (i in seq_along(definitions_list)) {\n  list_name <- names(definitions_list)[i]\n  colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, \"_value\"))\n}\n\ndefinitions_list[[\"Education\"]]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Education\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Education_value\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"Below College\"},{\"1\":\"2\",\"2\":\"College\"},{\"1\":\"3\",\"2\":\"Bachelor\"},{\"1\":\"4\",\"2\":\"Master\"},{\"1\":\"5\",\"2\":\"Doctor\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-7_5266a1c0a68eb89d1af261ad443a2c07'}\n\n```{.r .cell-code}\ndata_merged_tbl <- list(HR_Data = employee_attrition_tbl) %>%\n    \n        # Join everything\n        append(definitions_list, after = 1) %>%\n        reduce(left_join) %>%\n        \n        # Remove unnecessary columns\n        select(-one_of(names(definitions_list))) %>%\n        \n        # Format the \"_value\"\n        set_names(str_replace_all(names(.), pattern = \"_value\", replacement = \"\")) %>%\n        \n        # Resort\n        select(sort(names(.))) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n```\n:::\n:::\n\n# Return only unique values of BusinessTravel\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-8_3d183d2f14afbc5ca5ca501e122defb4'}\n\n```{.r .cell-code}\ndata_merged_tbl %>% \n  distinct(BusinessTravel)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"BusinessTravel\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Travel_Rarely\"},{\"1\":\"Travel_Frequently\"},{\"1\":\"Non-Travel\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n#Mutate To Factors\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-9_a91d8e76a367803b2b70e4396916f022'}\n\n```{.r .cell-code}\ndata_merged_tbl %>%\n        mutate_if(is.character, as.factor) %>%\n        glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 1,470\n#> Columns: 35\n#> $ Age                      <dbl> 41, 49, 37, 33, 27, 32, 59, 30, 38, 36, 35, 2…\n#> $ Attrition                <fct> Yes, No, Yes, No, No, No, No, No, No, No, No,…\n#> $ BusinessTravel           <fct> Travel_Rarely, Travel_Frequently, Travel_Rare…\n#> $ DailyRate                <dbl> 1102, 279, 1373, 1392, 591, 1005, 1324, 1358,…\n#> $ Department               <fct> Sales, Research & Development, Research & Dev…\n#> $ DistanceFromHome         <dbl> 1, 8, 2, 3, 2, 2, 3, 24, 23, 27, 16, 15, 26, …\n#> $ Education                <fct> College, Below College, College, Master, Belo…\n#> $ EducationField           <fct> Life Sciences, Life Sciences, Other, Life Sci…\n#> $ EmployeeCount            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#> $ EmployeeNumber           <dbl> 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16,…\n#> $ EnvironmentSatisfaction  <fct> Medium, High, Very High, Very High, Low, Very…\n#> $ Gender                   <fct> Female, Male, Male, Female, Male, Male, Femal…\n#> $ HourlyRate               <dbl> 94, 61, 92, 56, 40, 79, 81, 67, 44, 94, 84, 4…\n#> $ JobInvolvement           <fct> High, Medium, Medium, High, High, High, Very …\n#> $ JobLevel                 <dbl> 2, 2, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 1, …\n#> $ JobRole                  <fct> Sales Executive, Research Scientist, Laborato…\n#> $ JobSatisfaction          <fct> Very High, Medium, High, High, Medium, Very H…\n#> $ MaritalStatus            <fct> Single, Married, Single, Married, Married, Si…\n#> $ MonthlyIncome            <dbl> 5993, 5130, 2090, 2909, 3468, 3068, 2670, 269…\n#> $ MonthlyRate              <dbl> 19479, 24907, 2396, 23159, 16632, 11864, 9964…\n#> $ NumCompaniesWorked       <dbl> 8, 1, 6, 1, 9, 0, 4, 1, 0, 6, 0, 0, 1, 0, 5, …\n#> $ Over18                   <fct> Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, …\n#> $ OverTime                 <fct> Yes, No, Yes, Yes, No, No, Yes, No, No, No, N…\n#> $ PercentSalaryHike        <dbl> 11, 23, 15, 11, 12, 13, 20, 22, 21, 13, 13, 1…\n#> $ PerformanceRating        <fct> Excellent, Outstanding, Excellent, Excellent,…\n#> $ RelationshipSatisfaction <fct> Low, Very High, Medium, High, Very High, High…\n#> $ StandardHours            <dbl> 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 8…\n#> $ StockOptionLevel         <dbl> 0, 1, 0, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1, 1, 0, …\n#> $ TotalWorkingYears        <dbl> 8, 10, 7, 8, 6, 8, 12, 1, 10, 17, 6, 10, 5, 3…\n#> $ TrainingTimesLastYear    <dbl> 0, 3, 3, 3, 3, 2, 3, 2, 2, 3, 5, 3, 1, 2, 4, …\n#> $ WorkLifeBalance          <fct> Bad, Better, Better, Better, Better, Good, Go…\n#> $ YearsAtCompany           <dbl> 6, 10, 0, 8, 2, 7, 1, 1, 9, 7, 5, 9, 5, 2, 4,…\n#> $ YearsInCurrentRole       <dbl> 4, 7, 0, 7, 2, 7, 0, 0, 7, 7, 4, 5, 2, 2, 2, …\n#> $ YearsSinceLastPromotion  <dbl> 0, 1, 0, 3, 2, 3, 0, 0, 1, 7, 0, 0, 4, 1, 0, …\n#> $ YearsWithCurrManager     <dbl> 5, 7, 0, 0, 2, 6, 0, 0, 8, 7, 3, 8, 3, 2, 3, …\n```\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-10_aca31ee6df0c7c29d04ea89acd20b740'}\n\n```{.r .cell-code}\ndata_merged_tbl %>%\n        mutate_if(is.character, as.factor) %>%\n        select_if(is.factor) %>%\n        glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 1,470\n#> Columns: 16\n#> $ Attrition                <fct> Yes, No, Yes, No, No, No, No, No, No, No, No,…\n#> $ BusinessTravel           <fct> Travel_Rarely, Travel_Frequently, Travel_Rare…\n#> $ Department               <fct> Sales, Research & Development, Research & Dev…\n#> $ Education                <fct> College, Below College, College, Master, Belo…\n#> $ EducationField           <fct> Life Sciences, Life Sciences, Other, Life Sci…\n#> $ EnvironmentSatisfaction  <fct> Medium, High, Very High, Very High, Low, Very…\n#> $ Gender                   <fct> Female, Male, Male, Female, Male, Male, Femal…\n#> $ JobInvolvement           <fct> High, Medium, Medium, High, High, High, Very …\n#> $ JobRole                  <fct> Sales Executive, Research Scientist, Laborato…\n#> $ JobSatisfaction          <fct> Very High, Medium, High, High, Medium, Very H…\n#> $ MaritalStatus            <fct> Single, Married, Single, Married, Married, Si…\n#> $ Over18                   <fct> Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, …\n#> $ OverTime                 <fct> Yes, No, Yes, Yes, No, No, Yes, No, No, No, N…\n#> $ PerformanceRating        <fct> Excellent, Outstanding, Excellent, Excellent,…\n#> $ RelationshipSatisfaction <fct> Low, Very High, Medium, High, Very High, High…\n#> $ WorkLifeBalance          <fct> Bad, Better, Better, Better, Better, Good, Go…\n```\n:::\n\n```{.r .cell-code}\ndata_merged_tbl %>%\n        mutate_if(is.character, as.factor) %>%\n        select_if(is.factor) %>%\n        map(levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $Attrition\n#> [1] \"No\"  \"Yes\"\n#> \n#> $BusinessTravel\n#> [1] \"Non-Travel\"        \"Travel_Frequently\" \"Travel_Rarely\"    \n#> \n#> $Department\n#> [1] \"Human Resources\"        \"Research & Development\" \"Sales\"                 \n#> \n#> $Education\n#> [1] \"Below College\" \"College\"       \"Bachelor\"      \"Master\"       \n#> [5] \"Doctor\"       \n#> \n#> $EducationField\n#> [1] \"Human Resources\"  \"Life Sciences\"    \"Marketing\"        \"Medical\"         \n#> [5] \"Other\"            \"Technical Degree\"\n#> \n#> $EnvironmentSatisfaction\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $Gender\n#> [1] \"Female\" \"Male\"  \n#> \n#> $JobInvolvement\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $JobRole\n#> [1] \"Healthcare Representative\" \"Human Resources\"          \n#> [3] \"Laboratory Technician\"     \"Manager\"                  \n#> [5] \"Manufacturing Director\"    \"Research Director\"        \n#> [7] \"Research Scientist\"        \"Sales Executive\"          \n#> [9] \"Sales Representative\"     \n#> \n#> $JobSatisfaction\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $MaritalStatus\n#> [1] \"Divorced\" \"Married\"  \"Single\"  \n#> \n#> $Over18\n#> [1] \"Y\"\n#> \n#> $OverTime\n#> [1] \"No\"  \"Yes\"\n#> \n#> $PerformanceRating\n#> [1] \"Low\"         \"Good\"        \"Excellent\"   \"Outstanding\"\n#> \n#> $RelationshipSatisfaction\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $WorkLifeBalance\n#> [1] \"Bad\"    \"Good\"   \"Better\" \"Best\"\n```\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-11_d4231acb2affefc8523012fab50a979f'}\n\n```{.r .cell-code}\ndata_processed_tbl <- data_merged_tbl %>%        \n        mutate_if(is.character, as.factor) %>%\n        mutate(\n            BusinessTravel = BusinessTravel %>% fct_relevel(\"Non-Travel\", \n                                                            \"Travel_Rarely\", \n                                                            \"Travel_Frequently\"),\n            MaritalStatus  = MaritalStatus %>% fct_relevel(\"Single\", \n                                                           \"Married\", \n                                                           \"Divorced\")\n        )\n        \ndata_processed_tbl %>% \n  select_if(is.factor) %>% \n  map(levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $Attrition\n#> [1] \"No\"  \"Yes\"\n#> \n#> $BusinessTravel\n#> [1] \"Non-Travel\"        \"Travel_Rarely\"     \"Travel_Frequently\"\n#> \n#> $Department\n#> [1] \"Human Resources\"        \"Research & Development\" \"Sales\"                 \n#> \n#> $Education\n#> [1] \"Below College\" \"College\"       \"Bachelor\"      \"Master\"       \n#> [5] \"Doctor\"       \n#> \n#> $EducationField\n#> [1] \"Human Resources\"  \"Life Sciences\"    \"Marketing\"        \"Medical\"         \n#> [5] \"Other\"            \"Technical Degree\"\n#> \n#> $EnvironmentSatisfaction\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $Gender\n#> [1] \"Female\" \"Male\"  \n#> \n#> $JobInvolvement\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $JobRole\n#> [1] \"Healthcare Representative\" \"Human Resources\"          \n#> [3] \"Laboratory Technician\"     \"Manager\"                  \n#> [5] \"Manufacturing Director\"    \"Research Director\"        \n#> [7] \"Research Scientist\"        \"Sales Executive\"          \n#> [9] \"Sales Representative\"     \n#> \n#> $JobSatisfaction\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $MaritalStatus\n#> [1] \"Single\"   \"Married\"  \"Divorced\"\n#> \n#> $Over18\n#> [1] \"Y\"\n#> \n#> $OverTime\n#> [1] \"No\"  \"Yes\"\n#> \n#> $PerformanceRating\n#> [1] \"Low\"         \"Good\"        \"Excellent\"   \"Outstanding\"\n#> \n#> $RelationshipSatisfaction\n#> [1] \"Low\"       \"Medium\"    \"High\"      \"Very High\"\n#> \n#> $WorkLifeBalance\n#> [1] \"Bad\"    \"Good\"   \"Better\" \"Best\"\n```\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-12_5f3c61f7e3666f43113bc43f007a66ea'}\n\n```{.r .cell-code}\nsource(\"process_hr_data_readable.R\")\n\nprocess_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 1,470\n#> Columns: 35\n#> $ Age                      <dbl> 41, 49, 37, 33, 27, 32, 59, 30, 38, 36, 35, 2…\n#> $ Attrition                <fct> Yes, No, Yes, No, No, No, No, No, No, No, No,…\n#> $ BusinessTravel           <fct> Travel_Rarely, Travel_Frequently, Travel_Rare…\n#> $ DailyRate                <dbl> 1102, 279, 1373, 1392, 591, 1005, 1324, 1358,…\n#> $ Department               <fct> Sales, Research & Development, Research & Dev…\n#> $ DistanceFromHome         <dbl> 1, 8, 2, 3, 2, 2, 3, 24, 23, 27, 16, 15, 26, …\n#> $ Education                <fct> College, Below College, College, Master, Belo…\n#> $ EducationField           <fct> Life Sciences, Life Sciences, Other, Life Sci…\n#> $ EmployeeCount            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#> $ EmployeeNumber           <dbl> 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16,…\n#> $ EnvironmentSatisfaction  <fct> Medium, High, Very High, Very High, Low, Very…\n#> $ Gender                   <fct> Female, Male, Male, Female, Male, Male, Femal…\n#> $ HourlyRate               <dbl> 94, 61, 92, 56, 40, 79, 81, 67, 44, 94, 84, 4…\n#> $ JobInvolvement           <fct> High, Medium, Medium, High, High, High, Very …\n#> $ JobLevel                 <dbl> 2, 2, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 1, …\n#> $ JobRole                  <fct> Sales Executive, Research Scientist, Laborato…\n#> $ JobSatisfaction          <fct> Very High, Medium, High, High, Medium, Very H…\n#> $ MaritalStatus            <fct> Single, Married, Single, Married, Married, Si…\n#> $ MonthlyIncome            <dbl> 5993, 5130, 2090, 2909, 3468, 3068, 2670, 269…\n#> $ MonthlyRate              <dbl> 19479, 24907, 2396, 23159, 16632, 11864, 9964…\n#> $ NumCompaniesWorked       <dbl> 8, 1, 6, 1, 9, 0, 4, 1, 0, 6, 0, 0, 1, 0, 5, …\n#> $ Over18                   <fct> Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, …\n#> $ OverTime                 <fct> Yes, No, Yes, Yes, No, No, Yes, No, No, No, N…\n#> $ PercentSalaryHike        <dbl> 11, 23, 15, 11, 12, 13, 20, 22, 21, 13, 13, 1…\n#> $ PerformanceRating        <fct> Excellent, Outstanding, Excellent, Excellent,…\n#> $ RelationshipSatisfaction <fct> Low, Very High, Medium, High, Very High, High…\n#> $ StandardHours            <dbl> 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 8…\n#> $ StockOptionLevel         <dbl> 0, 1, 0, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1, 1, 0, …\n#> $ TotalWorkingYears        <dbl> 8, 10, 7, 8, 6, 8, 12, 1, 10, 17, 6, 10, 5, 3…\n#> $ TrainingTimesLastYear    <dbl> 0, 3, 3, 3, 3, 2, 3, 2, 2, 3, 5, 3, 1, 2, 4, …\n#> $ WorkLifeBalance          <fct> Bad, Better, Better, Better, Better, Good, Go…\n#> $ YearsAtCompany           <dbl> 6, 10, 0, 8, 2, 7, 1, 1, 9, 7, 5, 9, 5, 2, 4,…\n#> $ YearsInCurrentRole       <dbl> 4, 7, 0, 7, 2, 7, 0, 0, 7, 7, 4, 5, 2, 2, 2, …\n#> $ YearsSinceLastPromotion  <dbl> 0, 1, 0, 3, 2, 3, 0, 0, 1, 7, 0, 0, 4, 1, 0, …\n#> $ YearsWithCurrManager     <dbl> 5, 7, 0, 0, 2, 6, 0, 0, 8, 7, 3, 8, 3, 2, 3, …\n```\n:::\n:::\n\n# DATA PREPARATION ----\n# Machine readable ----\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-13_02bc0c08e07bd051041d24e88dff7396'}\n\n```{.r .cell-code}\n# Processing pipeline\n\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n```\n:::\n\n```{.r .cell-code}\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl  <- testing(split_obj)\n```\n:::\n\n# Plot Faceted Histgoram function\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-14_1006e40c7833def1472db261b7bbbfee'}\n\n```{.r .cell-code}\nsource(\"plot_hist_facet.R\")\n\n\n# To create a function and test it, we can assign our data temporarily to data\ndata <- train_readable_tbl \n\n# Example calls\ntrain_readable_tbl %>% plot_hist_facet()\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntrain_readable_tbl %>% plot_hist_facet(fct_rev = T)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Bring attirtion to the top (alt.: select(Attrition, everything()))\ntrain_readable_tbl %>% \n  relocate(Attrition) %>% \n  plot_hist_facet()\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n:::\n\n# Data Preprocessing With Recipes ----\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-15_0da97be64a670c1b74fd68a0753c069d'}\n\n```{.r .cell-code}\n# Plan: Correlation Analysis\n\n# 1. Zero Variance Features ----\n\nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n    step_zv(all_predictors())\n\nrecipe_obj %>% \n      prep()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Recipe ──────────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Inputs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Number of variables by role\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> outcome:    1\n#> predictor: 34\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Training information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Training data contained 1249 data points and no incomplete rows.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Operations\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> • Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n```\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-16_9fc04eefefd6bce1b5b6a6c221383621'}\n\n```{.r .cell-code}\n# 2. Transformations ---- (for skewed features)\n\n\nskewed_feature_names <- train_readable_tbl %>%\n    select(where(is.numeric)) %>%\n    map_df(skewness) %>%\n    pivot_longer(cols = everything(),\n                 names_to = \"key\",\n                 values_to = \"value\",\n                 names_transform = list(key = forcats::fct_inorder)) %>%\n    arrange(desc(value)) %>%\n    \n    # Let's set the cutoff value to 0.7 (beccause TrainingTimesLastYear does not seem to be that skewed)\n    filter(value >= 0.7) %>%\n    pull(key) %>%\n    as.character()\n\ntrain_readable_tbl %>%\n    select(all_of(skewed_feature_names)) %>%\n    plot_hist_facet()\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-17_0edca072f9e1cd77c504fc5feffe5cc1'}\n\n```{.r .cell-code}\n!skewed_feature_names %in% c(\"JobLevel\", \"StockOptionLevel\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nskewed_feature_names <- train_readable_tbl %>%\n    select(where(is.numeric)) %>%\n    map_df(skewness) %>%\n    pivot_longer(cols = everything(),\n                 names_to = \"key\",\n                 values_to = \"value\",\n                 names_transform = list(key = forcats::fct_inorder)) %>%\n    arrange(desc(value)) %>%\n    filter(value >= 0.7) %>%\n    filter(!key %in% c(\"JobLevel\", \"StockOptionLevel\")) %>%\n    pull(key) %>%\n    as.character()\n    \n# We need to convert those columns to factors in the next step\nfactor_names <- c(\"JobLevel\", \"StockOptionLevel\")\n```\n:::\n\n#Fix Skewness with step_yeoJohnson()\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-18_744a637f903275ad28ecfcf8ddbb2e0b'}\n\n```{.r .cell-code}\nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n    step_zv(all_predictors()) %>%\n    step_YeoJohnson(skewed_feature_names) %>%\n    step_mutate_at(factor_names, fn = as.factor)\n    \nrecipe_obj %>% \n    prep() %>% \n    bake(train_readable_tbl) %>% \n    select(skewed_feature_names) %>%\n    plot_hist_facet()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\n#> ℹ Please use `all_of()` or `any_of()` instead.\n#>   # Was:\n#>   data %>% select(skewed_feature_names)\n#> \n#>   # Now:\n#>   data %>% select(all_of(skewed_feature_names))\n#> \n#> See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\n#> ℹ Please use `all_of()` or `any_of()` instead.\n#>   # Was:\n#>   data %>% select(factor_names)\n#> \n#>   # Now:\n#>   data %>% select(all_of(factor_names))\n#> \n#> See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n# 3. Center and scale\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-19_fe111bc8882625519eb5b3e297cf38e0'}\n\n```{.r .cell-code}\n# Plot numeric data\ntrain_readable_tbl %>% \n  select(where(is.numeric)) %>% \n  plot_hist_facet()\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-20_233367a2e85a34236fa904a41509cd2b'}\n\n```{.r .cell-code}\nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n    step_zv(all_predictors()) %>%\n    step_YeoJohnson(skewed_feature_names) %>%\n    step_mutate_at(factor_names, fn = as.factor) %>%\n    step_center(all_numeric()) %>%\n    step_scale(all_numeric())\n\n# You can compare the means attribute before and after prepping the recipe\nrecipe_obj$steps[[4]] # before prep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $terms\n#> <list_of<quosure>>\n#> \n#> [[1]]\n#> <quosure>\n#> expr: ^all_numeric()\n#> env:  0x00000152334a1a78\n#> \n#> \n#> $role\n#> [1] NA\n#> \n#> $trained\n#> [1] FALSE\n#> \n#> $means\n#> NULL\n#> \n#> $na_rm\n#> [1] TRUE\n#> \n#> $skip\n#> [1] FALSE\n#> \n#> $id\n#> [1] \"center_GWd48\"\n#> \n#> $case_weights\n#> NULL\n#> \n#> attr(,\"class\")\n#> [1] \"step_center\" \"step\"\n```\n:::\n\n```{.r .cell-code}\nprepared_recipe <- recipe_obj %>% prep()\nprepared_recipe$steps[[4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $terms\n#> <list_of<quosure>>\n#> \n#> [[1]]\n#> <quosure>\n#> expr: ^all_numeric()\n#> env:  0x00000152334a1a78\n#> \n#> \n#> $role\n#> [1] NA\n#> \n#> $trained\n#> [1] TRUE\n#> \n#> $means\n#>                     Age               DailyRate        DistanceFromHome \n#>            3.689672e+01            7.978519e+02            2.009472e+00 \n#>          EmployeeNumber              HourlyRate           MonthlyIncome \n#>            1.039169e+03            6.595757e+01            3.926886e+00 \n#>             MonthlyRate      NumCompaniesWorked       PercentSalaryHike \n#>            1.447811e+04            1.050292e+00            6.783763e-01 \n#>       TotalWorkingYears   TrainingTimesLastYear          YearsAtCompany \n#>            3.352732e+00            2.786229e+00            2.011652e+00 \n#>      YearsInCurrentRole YearsSinceLastPromotion    YearsWithCurrManager \n#>            1.727181e+00            5.225350e-01            1.709616e+00 \n#> \n#> $na_rm\n#> [1] TRUE\n#> \n#> $skip\n#> [1] FALSE\n#> \n#> $id\n#> [1] \"center_GWd48\"\n#> \n#> $case_weights\n#> NULL\n#> \n#> attr(,\"class\")\n#> [1] \"step_center\" \"step\"\n```\n:::\n\n```{.r .cell-code}\nprepared_recipe %>%\n    bake(new_data = train_readable_tbl) %>%\n    select(where(is.numeric)) %>% \n    plot_hist_facet()\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-21_31060d53b0c5fd449e3d7c6f3df15d33'}\n\n```{.r .cell-code}\n# 4. Dummy variables ----\n\nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n    step_zv(all_predictors()) %>%\n    step_YeoJohnson(skewed_feature_names) %>%\n    step_mutate_at(factor_names, fn = as.factor) %>%\n    step_center(all_numeric()) %>%\n    step_scale(all_numeric()) %>%\n    step_dummy(all_nominal()) %>% \n    \n    # prepare the final recipe\n    prep()\n```\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-22_661a18a30b525b8bcebc4af903f9cc72'}\n\n```{.r .cell-code}\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\n\ntrain_tbl %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 1,249\n#> Columns: 66\n#> $ Age                                <dbl> 0.12135569, 1.66128715, 0.56133611,…\n#> $ DailyRate                          <dbl> 1.72799052, 1.72799052, 1.16626413,…\n#> $ DistanceFromHome                   <dbl> -1.0115152, -0.4249586, -0.6817922,…\n#> $ EmployeeNumber                     <dbl> -0.80492713, -0.82158646, -0.241841…\n#> $ HourlyRate                         <dbl> -1.19426800, -1.79245965, 1.4477451…\n#> $ MonthlyIncome                      <dbl> -1.86207613, 1.63117757, 0.07274848…\n#> $ MonthlyRate                        <dbl> -0.3347480, -0.5881964, 1.3050466, …\n#> $ NumCompaniesWorked                 <dbl> -0.57820949, 0.02672436, 0.02672436…\n#> $ PercentSalaryHike                  <dbl> 1.6610314, -0.4802126, -0.4802126, …\n#> $ TotalWorkingYears                  <dbl> -2.00413096, 1.96812006, 0.86999363…\n#> $ TrainingTimesLastYear              <dbl> 0.1653511, -0.6081451, -1.3816412, …\n#> $ YearsAtCompany                     <dbl> -1.45454900, -0.05799426, -0.057994…\n#> $ YearsInCurrentRole                 <dbl> -1.60865321, -0.43886958, -0.078447…\n#> $ YearsSinceLastPromotion            <dbl> -1.0965229, 0.1067096, 0.1067096, -…\n#> $ YearsWithCurrManager               <dbl> -1.56287774, 0.23200520, -0.0599865…\n#> $ BusinessTravel_Travel_Rarely       <dbl> 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1,…\n#> $ BusinessTravel_Travel_Frequently   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,…\n#> $ Department_Research...Development  <dbl> 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1,…\n#> $ Department_Sales                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,…\n#> $ Education_College                  <dbl> 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ Education_Bachelor                 <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,…\n#> $ Education_Master                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1,…\n#> $ Education_Doctor                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ EducationField_Life.Sciences       <dbl> 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0,…\n#> $ EducationField_Marketing           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,…\n#> $ EducationField_Medical             <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,…\n#> $ EducationField_Other               <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ EducationField_Technical.Degree    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,…\n#> $ EnvironmentSatisfaction_Medium     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,…\n#> $ EnvironmentSatisfaction_High       <dbl> 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,…\n#> $ EnvironmentSatisfaction_Very.High  <dbl> 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0,…\n#> $ Gender_Male                        <dbl> 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,…\n#> $ JobInvolvement_Medium              <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,…\n#> $ JobInvolvement_High                <dbl> 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1,…\n#> $ JobInvolvement_Very.High           <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,…\n#> $ JobLevel_X2                        <dbl> 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0,…\n#> $ JobLevel_X3                        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ JobLevel_X4                        <dbl> 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,…\n#> $ JobLevel_X5                        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ JobRole_Human.Resources            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ JobRole_Laboratory.Technician      <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,…\n#> $ JobRole_Manager                    <dbl> 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,…\n#> $ JobRole_Manufacturing.Director     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,…\n#> $ JobRole_Research.Director          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ JobRole_Research.Scientist         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,…\n#> $ JobRole_Sales.Executive            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,…\n#> $ JobRole_Sales.Representative       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ JobSatisfaction_Medium             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,…\n#> $ JobSatisfaction_High               <dbl> 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0,…\n#> $ JobSatisfaction_Very.High          <dbl> 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,…\n#> $ MaritalStatus_Married              <dbl> 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1,…\n#> $ MaritalStatus_Divorced             <dbl> 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0,…\n#> $ OverTime_Yes                       <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,…\n#> $ PerformanceRating_Good             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ PerformanceRating_Excellent        <dbl> 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,…\n#> $ PerformanceRating_Outstanding      <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n#> $ RelationshipSatisfaction_Medium    <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,…\n#> $ RelationshipSatisfaction_High      <dbl> 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1,…\n#> $ RelationshipSatisfaction_Very.High <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ StockOptionLevel_X1                <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,…\n#> $ StockOptionLevel_X2                <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,…\n#> $ StockOptionLevel_X3                <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,…\n#> $ WorkLifeBalance_Good               <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1,…\n#> $ WorkLifeBalance_Better             <dbl> 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0,…\n#> $ WorkLifeBalance_Best               <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ Attrition_Yes                      <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,…\n```\n:::\n\n```{.r .cell-code}\ntest_tbl <- bake(recipe_obj, new_data = test_readable_tbl)\n```\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-23_7eab47d0f485a0c37f42b6b64aa3d1cd'}\n\n```{.r .cell-code}\ntrain_tbl %>%\n\n        # Convert characters & factors to numeric\n        mutate(across(where(is.character), as.factor)) %>%\n        mutate(across(where(is.factor), as.numeric)) %>%\n        \n        # Correlation\n        cor(use = \"pairwise.complete.obs\") %>% \n        as_tibble() %>%\n        mutate(feature = names(.)) %>% \n        select(feature, Attrition_Yes) %>% \n        \n        # Filter the target, because we now the correlation is 100%\n        filter(!(feature == \"Attrition_Yes\")) %>% \n        \n        # Convert character back to factors\n        mutate(across(where(is.character), as_factor))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in stats::cor(x, ...): Standardabweichung ist Null\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"feature\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"Attrition_Yes\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Age\",\"2\":\"-0.161863233\"},{\"1\":\"DailyRate\",\"2\":\"-0.062467471\"},{\"1\":\"DistanceFromHome\",\"2\":\"0.079603606\"},{\"1\":\"EmployeeNumber\",\"2\":\"-0.019686125\"},{\"1\":\"HourlyRate\",\"2\":\"-0.015333593\"},{\"1\":\"MonthlyIncome\",\"2\":\"-0.202617100\"},{\"1\":\"MonthlyRate\",\"2\":\"0.013928255\"},{\"1\":\"NumCompaniesWorked\",\"2\":\"0.033238730\"},{\"1\":\"PercentSalaryHike\",\"2\":\"0.002315050\"},{\"1\":\"TotalWorkingYears\",\"2\":\"-0.224528615\"},{\"1\":\"TrainingTimesLastYear\",\"2\":\"-0.066405747\"},{\"1\":\"YearsAtCompany\",\"2\":\"-0.202041403\"},{\"1\":\"YearsInCurrentRole\",\"2\":\"-0.182338959\"},{\"1\":\"YearsSinceLastPromotion\",\"2\":\"-0.057213055\"},{\"1\":\"YearsWithCurrManager\",\"2\":\"-0.185668369\"},{\"1\":\"BusinessTravel_Travel_Rarely\",\"2\":\"-0.066999036\"},{\"1\":\"BusinessTravel_Travel_Frequently\",\"2\":\"0.131670210\"},{\"1\":\"Department_Research...Development\",\"2\":\"-0.077267266\"},{\"1\":\"Department_Sales\",\"2\":\"0.071976341\"},{\"1\":\"Education_College\",\"2\":\"-0.008304072\"},{\"1\":\"Education_Bachelor\",\"2\":\"0.039484357\"},{\"1\":\"Education_Master\",\"2\":\"-0.039711617\"},{\"1\":\"Education_Doctor\",\"2\":\"-0.019979377\"},{\"1\":\"EducationField_Life.Sciences\",\"2\":\"-0.043389660\"},{\"1\":\"EducationField_Marketing\",\"2\":\"0.071002498\"},{\"1\":\"EducationField_Medical\",\"2\":\"-0.062707595\"},{\"1\":\"EducationField_Other\",\"2\":\"0.004807121\"},{\"1\":\"EducationField_Technical.Degree\",\"2\":\"0.067398461\"},{\"1\":\"EnvironmentSatisfaction_Medium\",\"2\":\"-0.010366082\"},{\"1\":\"EnvironmentSatisfaction_High\",\"2\":\"-0.039834673\"},{\"1\":\"EnvironmentSatisfaction_Very.High\",\"2\":\"-0.062012224\"},{\"1\":\"Gender_Male\",\"2\":\"0.029607646\"},{\"1\":\"JobInvolvement_Medium\",\"2\":\"0.041743621\"},{\"1\":\"JobInvolvement_High\",\"2\":\"-0.048309106\"},{\"1\":\"JobInvolvement_Very.High\",\"2\":\"-0.056695527\"},{\"1\":\"JobLevel_X2\",\"2\":\"-0.117148966\"},{\"1\":\"JobLevel_X3\",\"2\":\"-0.033059969\"},{\"1\":\"JobLevel_X4\",\"2\":\"-0.088374729\"},{\"1\":\"JobLevel_X5\",\"2\":\"-0.049808190\"},{\"1\":\"JobRole_Human.Resources\",\"2\":\"0.034011470\"},{\"1\":\"JobRole_Laboratory.Technician\",\"2\":\"0.091462301\"},{\"1\":\"JobRole_Manager\",\"2\":\"-0.072513108\"},{\"1\":\"JobRole_Manufacturing.Director\",\"2\":\"-0.075265877\"},{\"1\":\"JobRole_Research.Director\",\"2\":\"-0.097903674\"},{\"1\":\"JobRole_Research.Scientist\",\"2\":\"0.005663501\"},{\"1\":\"JobRole_Sales.Executive\",\"2\":\"0.015358456\"},{\"1\":\"JobRole_Sales.Representative\",\"2\":\"0.141362385\"},{\"1\":\"JobSatisfaction_Medium\",\"2\":\"0.003765563\"},{\"1\":\"JobSatisfaction_High\",\"2\":\"0.027719307\"},{\"1\":\"JobSatisfaction_Very.High\",\"2\":\"-0.096861825\"},{\"1\":\"MaritalStatus_Married\",\"2\":\"-0.085519597\"},{\"1\":\"MaritalStatus_Divorced\",\"2\":\"-0.064737234\"},{\"1\":\"OverTime_Yes\",\"2\":\"0.257056780\"},{\"1\":\"PerformanceRating_Good\",\"2\":\"NA\"},{\"1\":\"PerformanceRating_Excellent\",\"2\":\"-0.020646607\"},{\"1\":\"PerformanceRating_Outstanding\",\"2\":\"0.020646607\"},{\"1\":\"RelationshipSatisfaction_Medium\",\"2\":\"0.001499324\"},{\"1\":\"RelationshipSatisfaction_High\",\"2\":\"-0.039834673\"},{\"1\":\"RelationshipSatisfaction_Very.High\",\"2\":\"-0.022170769\"},{\"1\":\"StockOptionLevel_X1\",\"2\":\"-0.136870926\"},{\"1\":\"StockOptionLevel_X2\",\"2\":\"-0.077868538\"},{\"1\":\"StockOptionLevel_X3\",\"2\":\"0.028975031\"},{\"1\":\"WorkLifeBalance_Good\",\"2\":\"0.008375398\"},{\"1\":\"WorkLifeBalance_Better\",\"2\":\"-0.061330453\"},{\"1\":\"WorkLifeBalance_Best\",\"2\":\"0.021122532\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-24_f9c93f5068826bb25de85545b38b82c0'}\n\n```{.r .cell-code}\nsource(\"get_cor.R\")\n\nsource(\"plot_cor.R\")\n\nplot_cor(data = train_tbl, target = Attrition_Yes, fct_reorder = T, fct_rev = T)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in stats::cor(x, ...): Standardabweichung ist Null\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: There was 1 warning in `mutate()`.\n#> ℹ In argument: `feature = fct_reorder(feature, Attrition_Yes)`.\n#> Caused by warning:\n#> ! `fct_reorder()` removing 1 missing value.\n#> ℹ Use `.na_rm = TRUE` to silence this message.\n#> ℹ Use `.na_rm = FALSE` to preserve NAs.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 1 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 1 rows containing missing values (`geom_segment()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 1 rows containing missing values (`geom_label()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-25_ccf919419678f953d730c200cd52b450'}\n\n```{.r .cell-code}\ntrain_tbl %>% \n  select(Attrition_Yes, contains(\"JobRole\")) %>% \n  plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = T)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n# Correlation Evaluation ----\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-26_561f6976dfbcfcca207748b35c79de38'}\n\n```{.r .cell-code}\n#   1. Descriptive features: age, gender, marital status \ntrain_tbl %>%\n    select(Attrition_Yes, Age, contains(\"Gender\"), \n           contains(\"MaritalStatus\"), NumCompaniesWorked, \n           contains(\"Over18\"), DistanceFromHome) %>%\n    plot_cor(target = Attrition_Yes, fct_reorder = T, fct_rev = F)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-27_385e6c176386aec4b3bae7d792f39743'}\n\n```{.r .cell-code}\n#   2. Employment features: department, job role, job level\ntrain_tbl %>%\n     select(Attrition_Yes, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %>%\n     plot_cor(target = Attrition_Yes, fct_reorder = F, fct_rev = F) \n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \ntrain_tbl %>%\n    select(Attrition_Yes, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n    plot_cor(target = Attrition_Yes, fct_reorder = F, fct_rev = F)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-27-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \ntrain_tbl %>%\n    select(Attrition_Yes, contains(\"satisfaction\"), contains(\"life\")) %>%\n    plot_cor(target = Attrition_Yes, fct_reorder = F, fct_rev = F)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-27-3.png){width=672}\n:::\n\n```{.r .cell-code}\n#   5. Performance Data: Job Involvment, Performance Rating\ntrain_tbl %>%\n    select(Attrition_Yes, contains(\"performance\"), contains(\"involvement\")) %>%\n    plot_cor(target = Attrition_Yes, fct_reorder = F, fct_rev = F)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in stats::cor(x, ...): Standardabweichung ist Null\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 1 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 1 rows containing missing values (`geom_segment()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 1 rows containing missing values (`geom_label()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-27-4.png){width=672}\n:::\n\n```{.r .cell-code}\n#   6. Work-Life Features \ntrain_tbl %>%\n    select(Attrition_Yes, contains(\"overtime\"), contains(\"travel\")) %>%\n    plot_cor(target = Attrition_Yes, fct_reorder = F, fct_rev = F)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-27-5.png){width=672}\n:::\n\n```{.r .cell-code}\n#   7. Training and Education \ntrain_tbl %>%\n    select(Attrition_Yes, contains(\"training\"), contains(\"education\")) %>%\n    plot_cor(target = Attrition_Yes, fct_reorder = F, fct_rev = F)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-27-6.png){width=672}\n:::\n\n```{.r .cell-code}\n#   8. Time-Based Features: Years at company, years in current role\ntrain_tbl %>%\n    select(Attrition_Yes, contains(\"years\")) %>%\n    plot_cor(target = Attrition_Yes, fct_reorder = F, fct_rev = F)\n```\n\n::: {.cell-output-display}\n![](Challenge4_files/figure-html/unnamed-chunk-27-7.png){width=672}\n:::\n:::\n\n#H2o\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-28_dbe6cb71e77cfc76bd4f00e0289dc927'}\n\n```{.r .cell-code}\nemployee_attrition_tbl          <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndefinitions_raw_tbl             <- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n```\n:::\n\n```{.r .cell-code}\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n```\n:::\n\n```{.r .cell-code}\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\ntrain_readable_tbl              <- training(split_obj)\ntest_readable_tbl               <- testing(split_obj)\n\nrecipe_obj <- recipe(Attrition ~., data = train_readable_tbl) %>% \n    step_zv(all_predictors()) %>% \n    step_mutate_at(JobLevel, StockOptionLevel, fn = as.factor) %>% \n    prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n```\n:::\n\n# Modeling\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-29_0f35ab218a65af10476c53e1fec09068'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         28 minutes 13 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 21 days \n#>     H2O cluster name:           H2O_started_from_R_tiend_ham688 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.77 GB \n#>     H2O cluster total cores:    12 \n#>     H2O cluster allowed cores:  12 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15 ucrt)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 21 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n```\n:::\n\n```{.r .cell-code}\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# Set the target and predictors\ny <- \"Attrition\"\nx <- setdiff(names(train_h2o), y)\n```\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-30_77c8ad8403badda396c0646fae88a8e2'}\n\n```{.r .cell-code}\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |====                                                                  |   6%\n#> 22:25:36.902: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 22:25:36.905: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-31_4619f7daa937f5dbc31beaf26f59537e'}\n\n```{.r .cell-code}\ntypeof(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"S4\"\n```\n:::\n\n```{.r .cell-code}\n## \"S4\"\n\nslotNames(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n```\n:::\n\n```{.r .cell-code}\n## [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"      \"modeling_steps\" \"training_info\" \n\nautoml_models_h2o@leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_2_AutoML_4_20230529_222536 0.8570878 0.3457396\n#> 2 StackedEnsemble_BestOfFamily_3_AutoML_4_20230529_222536 0.8555470 0.3482861\n#> 3 StackedEnsemble_BestOfFamily_4_AutoML_4_20230529_222536 0.8550334 0.3507665\n#> 4                          GLM_1_AutoML_4_20230529_222536 0.8536210 0.3519809\n#> 5 StackedEnsemble_BestOfFamily_2_AutoML_4_20230529_222536 0.8536210 0.3516953\n#> 6    StackedEnsemble_AllModels_1_AutoML_4_20230529_222536 0.8524653 0.3502106\n#>       aucpr mean_per_class_error      rmse       mse\n#> 1 0.7201560            0.2356831 0.3203094 0.1025981\n#> 2 0.7009316            0.2442219 0.3225032 0.1040083\n#> 3 0.7067570            0.2442219 0.3235050 0.1046555\n#> 4 0.7018518            0.2470467 0.3227215 0.1041491\n#> 5 0.7018518            0.2470467 0.3243967 0.1052332\n#> 6 0.7145214            0.1986389 0.3202698 0.1025728\n#> \n#> [46 rows x 7 columns]\n```\n:::\n\n```{.r .cell-code}\n##                                              model_id       auc   logloss     aucpr mean_per_class_error      rmse        mse\n## 1 StackedEnsemble_BestOfFamily_AutoML_20200820_190823 0.8585439 0.2992854 0.5869929            0.2406915 0.2978416 0.08870964\n## 2          GBM_grid__1_AutoML_20200820_190823_model_3 0.8494016 0.3137896 0.5165541            0.2386968 0.3098134 0.09598435\n## 3 DeepLearning_grid__1_AutoML_20200820_190823_model_1 0.8479056 0.3066365 0.6154288            0.2583112 0.3071528 0.09434283\n## 4      XGBoost_grid__1_AutoML_20200820_190823_model_5 0.8439162 0.3057109 0.5299331            0.2061170 0.3071419 0.09433613\n## 5    StackedEnsemble_AllModels_AutoML_20200820_190823 0.8425864 0.3211612 0.5205591            0.2539894 0.3107399 0.09655928\n## 6      XGBoost_grid__1_AutoML_20200820_190823_model_6 0.8257979 0.3211936 0.5009608            0.2536569 0.3111129 0.09679122\n##\n## [30 rows x 7 columns] \n\nautoml_models_h2o@leader\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_2_AutoML_4_20230529_222536 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)              6/9\n#> 3           # GBM base models (used / total)              4/5\n#> 4           # GLM base models (used / total)              1/1\n#> 5  # DeepLearning base models (used / total)              1/1\n#> 6           # DRF base models (used / total)              0/2\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.05985868\n#> RMSE:  0.2446603\n#> LogLoss:  0.2214039\n#> Mean Per-Class Error:  0.146485\n#> AUC:  0.9249619\n#> AUCPR:  0.8264121\n#> Gini:  0.8499237\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error      Rate\n#> No     889  20 0.022002   =20/909\n#> Yes     42 113 0.270968   =42/155\n#> Totals 931 133 0.058271  =62/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.397030   0.784722 111\n#> 2                       max f2  0.226089   0.769690 176\n#> 3                 max f0point5  0.534689   0.831703  76\n#> 4                 max accuracy  0.397030   0.941729 111\n#> 5                max precision  0.966074   1.000000   0\n#> 6                   max recall  0.004457   1.000000 392\n#> 7              max specificity  0.966074   1.000000   0\n#> 8             max absolute_mcc  0.397030   0.754197 111\n#> 9   max min_per_class_accuracy  0.200154   0.858065 191\n#> 10 max mean_per_class_accuracy  0.226089   0.867174 176\n#> 11                     max tns  0.966074 909.000000   0\n#> 12                     max fns  0.966074 154.000000   0\n#> 13                     max fps  0.000921 909.000000 399\n#> 14                     max tps  0.004457 155.000000 392\n#> 15                     max tnr  0.966074   1.000000   0\n#> 16                     max fnr  0.966074   0.993548   0\n#> 17                     max fpr  0.000921   1.000000 399\n#> 18                     max tpr  0.004457   1.000000 392\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.1018263\n#> RMSE:  0.3191023\n#> LogLoss:  0.3369415\n#> Mean Per-Class Error:  0.2114214\n#> AUC:  0.8687791\n#> AUCPR:  0.7345641\n#> Gini:  0.7375582\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error     Rate\n#> No     139   8 0.054422   =8/147\n#> Yes     14  24 0.368421   =14/38\n#> Totals 153  32 0.118919  =22/185\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.397362   0.685714  31\n#> 2                       max f2  0.093466   0.705645  95\n#> 3                 max f0point5  0.441675   0.739437  25\n#> 4                 max accuracy  0.441675   0.881081  25\n#> 5                max precision  0.928226   1.000000   0\n#> 6                   max recall  0.020605   1.000000 142\n#> 7              max specificity  0.928226   1.000000   0\n#> 8             max absolute_mcc  0.397362   0.616487  31\n#> 9   max min_per_class_accuracy  0.198716   0.763158  60\n#> 10 max mean_per_class_accuracy  0.307159   0.800841  42\n#> 11                     max tns  0.928226 147.000000   0\n#> 12                     max fns  0.928226  37.000000   0\n#> 13                     max fps  0.001722 147.000000 184\n#> 14                     max tps  0.020605  38.000000 142\n#> 15                     max tnr  0.928226   1.000000   0\n#> 16                     max fnr  0.928226   0.973684   0\n#> 17                     max fpr  0.001722   1.000000 184\n#> 18                     max tpr  0.020605   1.000000 142\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.08511586\n#> RMSE:  0.2917462\n#> LogLoss:  0.3005205\n#> Mean Per-Class Error:  0.2174988\n#> AUC:  0.8409489\n#> AUCPR:  0.6117163\n#> Gini:  0.6818979\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error       Rate\n#> No     842  67 0.073707    =67/909\n#> Yes     56  99 0.361290    =56/155\n#> Totals 898 166 0.115602  =123/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.303756   0.616822 129\n#> 2                       max f2  0.255081   0.650307 151\n#> 3                 max f0point5  0.409654   0.661376  88\n#> 4                 max accuracy  0.409654   0.898496  88\n#> 5                max precision  0.967912   1.000000   0\n#> 6                   max recall  0.000807   1.000000 399\n#> 7              max specificity  0.967912   1.000000   0\n#> 8             max absolute_mcc  0.303756   0.549295 129\n#> 9   max min_per_class_accuracy  0.151283   0.765677 218\n#> 10 max mean_per_class_accuracy  0.255081   0.792981 151\n#> 11                     max tns  0.967912 909.000000   0\n#> 12                     max fns  0.967912 154.000000   0\n#> 13                     max fps  0.000807 909.000000 399\n#> 14                     max tps  0.000807 155.000000 399\n#> 15                     max tnr  0.967912   1.000000   0\n#> 16                     max fnr  0.967912   0.993548   0\n#> 17                     max fpr  0.000807   1.000000 399\n#> 18                     max tpr  0.000807   1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                mean       sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy   0.895050 0.031160   0.883178   0.921951   0.910714   0.845771\n#> auc        0.842212 0.032837   0.808038   0.832912   0.883466   0.817300\n#> err        0.104950 0.031160   0.116822   0.078049   0.089286   0.154229\n#> err_count 22.200000 5.890671  25.000000  16.000000  20.000000  31.000000\n#> f0point5   0.659837 0.124024   0.600000   0.817308   0.650888   0.494792\n#>           cv_5_valid\n#> accuracy    0.913636\n#> auc         0.869344\n#> err         0.086364\n#> err_count  19.000000\n#> f0point5    0.736196\n#> \n#> ---\n#>                         mean       sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.673953 0.182720   0.583333   0.944444   0.628571\n#> r2                  0.315600 0.080050   0.265835   0.352766   0.366608\n#> recall              0.666315 0.082784   0.677419   0.531250   0.758621\n#> residual_deviance 127.092545 8.322162 136.014020 130.499450 113.498710\n#> rmse                0.291097 0.016294   0.301571   0.291995   0.267180\n#> specificity         0.935035 0.045099   0.918033   0.994220   0.933333\n#>                   cv_4_valid cv_5_valid\n#> precision           0.463415   0.750000\n#> r2                  0.200389   0.392404\n#> recall              0.678571   0.685714\n#> residual_deviance 127.378310 128.072220\n#> rmse                0.309632   0.285105\n#> specificity         0.872832   0.956757\n```\n:::\n:::\n\n# Depending on the algorithm, the output will be different\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-32_97158cc81d581960afbcb829b205d285'}\n\n```{.r .cell-code}\n#h2o.getModel(\"C:/Users/tiend/Documents/GitHub/ss23-bdml-tiend96/content/01_journal/Challenge4/04_Modeling/h20_models/DeepLearning_1_AutoML_1_20230524_195722\")\n\n# Extracts and H2O model name by a position so can more easily use h2o.getModel()\nsource(\"extract_h2o_model_name_by_position.R\")\n\nautoml_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(6) %>% \n  h2o.getModel()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> StackedEnsemble_AllModels_1_AutoML_4_20230529_222536\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_1_AutoML_4_20230529_222536 \n#> Model Summary for Stacked Ensemble: \n#>                                     key            value\n#> 1                     Stacking strategy cross_validation\n#> 2  Number of base models (used / total)              4/6\n#> 3      # GBM base models (used / total)              3/4\n#> 4      # GLM base models (used / total)              1/1\n#> 5      # DRF base models (used / total)              0/1\n#> 6                 Metalearner algorithm              GLM\n#> 7    Metalearner fold assignment scheme           Random\n#> 8                    Metalearner nfolds                5\n#> 9               Metalearner fold_column               NA\n#> 10   Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.06218974\n#> RMSE:  0.2493787\n#> LogLoss:  0.2277585\n#> Mean Per-Class Error:  0.1557614\n#> AUC:  0.9159303\n#> AUCPR:  0.8043056\n#> Gini:  0.8318606\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error      Rate\n#> No     878  31 0.034103   =31/909\n#> Yes     43 112 0.277419   =43/155\n#> Totals 921 143 0.069549  =74/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.354185   0.751678 117\n#> 2                       max f2  0.221420   0.754491 169\n#> 3                 max f0point5  0.496098   0.813953  84\n#> 4                 max accuracy  0.363372   0.931391 114\n#> 5                max precision  0.973394   1.000000   0\n#> 6                   max recall  0.003016   1.000000 393\n#> 7              max specificity  0.973394   1.000000   0\n#> 8             max absolute_mcc  0.363372   0.712840 114\n#> 9   max min_per_class_accuracy  0.178541   0.852585 196\n#> 10 max mean_per_class_accuracy  0.221420   0.857497 169\n#> 11                     max tns  0.973394 909.000000   0\n#> 12                     max fns  0.973394 154.000000   0\n#> 13                     max fps  0.000511 909.000000 399\n#> 14                     max tps  0.003016 155.000000 393\n#> 15                     max tnr  0.973394   1.000000   0\n#> 16                     max fnr  0.973394   0.993548   0\n#> 17                     max fpr  0.000511   1.000000 399\n#> 18                     max tpr  0.003016   1.000000 393\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.1022395\n#> RMSE:  0.3197491\n#> LogLoss:  0.3390916\n#> Mean Per-Class Error:  0.179198\n#> AUC:  0.8664518\n#> AUCPR:  0.7286859\n#> Gini:  0.7329037\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error     Rate\n#> No     133  14 0.095238  =14/147\n#> Yes     10  28 0.263158   =10/38\n#> Totals 143  42 0.129730  =24/185\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.293812   0.700000  41\n#> 2                       max f2  0.293812   0.721649  41\n#> 3                 max f0point5  0.523707   0.762712  19\n#> 4                 max accuracy  0.523707   0.881081  19\n#> 5                max precision  0.938311   1.000000   0\n#> 6                   max recall  0.017679   1.000000 141\n#> 7              max specificity  0.938311   1.000000   0\n#> 8             max absolute_mcc  0.293812   0.618764  41\n#> 9   max min_per_class_accuracy  0.173367   0.763158  60\n#> 10 max mean_per_class_accuracy  0.293812   0.820802  41\n#> 11                     max tns  0.938311 147.000000   0\n#> 12                     max fns  0.938311  37.000000   0\n#> 13                     max fps  0.000965 147.000000 184\n#> 14                     max tps  0.017679  38.000000 141\n#> 15                     max tnr  0.938311   1.000000   0\n#> 16                     max fnr  0.938311   0.973684   0\n#> 17                     max fpr  0.000965   1.000000 184\n#> 18                     max tpr  0.017679   1.000000 141\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.08367052\n#> RMSE:  0.2892586\n#> LogLoss:  0.2975861\n#> Mean Per-Class Error:  0.2045956\n#> AUC:  0.8448029\n#> AUCPR:  0.6251117\n#> Gini:  0.6896057\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error       Rate\n#> No     842  67 0.073707    =67/909\n#> Yes     52 103 0.335484    =52/155\n#> Totals 894 170 0.111842  =119/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.299326   0.633846 134\n#> 2                       max f2  0.299326   0.651899 134\n#> 3                 max f0point5  0.469463   0.660750  75\n#> 4                 max accuracy  0.469463   0.897556  75\n#> 5                max precision  0.972328   1.000000   0\n#> 6                   max recall  0.000570   1.000000 399\n#> 7              max specificity  0.972328   1.000000   0\n#> 8             max absolute_mcc  0.299326   0.568855 134\n#> 9   max min_per_class_accuracy  0.151086   0.771177 219\n#> 10 max mean_per_class_accuracy  0.299326   0.795404 134\n#> 11                     max tns  0.972328 909.000000   0\n#> 12                     max fns  0.972328 154.000000   0\n#> 13                     max fps  0.000570 909.000000 399\n#> 14                     max tps  0.000570 155.000000 399\n#> 15                     max tnr  0.972328   1.000000   0\n#> 16                     max fnr  0.972328   0.993548   0\n#> 17                     max fpr  0.000570   1.000000 399\n#> 18                     max tpr  0.000570   1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                mean       sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy   0.899324 0.028890   0.877828   0.883117   0.926702   0.934579\n#> auc        0.840640 0.039229   0.856786   0.861678   0.839321   0.871736\n#> err        0.100676 0.028890   0.122172   0.116883   0.073298   0.065421\n#> err_count 21.600000 6.949820  27.000000  27.000000  14.000000  14.000000\n#> f0point5   0.667424 0.114968   0.634921   0.679612   0.729167   0.800000\n#>           cv_5_valid\n#> accuracy    0.874396\n#> auc         0.773679\n#> err         0.125604\n#> err_count  26.000000\n#> f0point5    0.493421\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.689985  0.157858   0.631579   0.682927   0.777778\n#> r2                  0.320849  0.073491   0.298845   0.357397   0.341775\n#> recall              0.619015  0.040995   0.648649   0.666667   0.583333\n#> residual_deviance 125.722520 21.623970 140.521360 154.553150 103.856930\n#> rmse                0.287437  0.023137   0.312626   0.309183   0.268917\n#> specificity         0.945506  0.035324   0.923913   0.931217   0.976048\n#>                   cv_4_valid cv_5_valid\n#> precision           0.888889   0.468750\n#> r2                  0.399854   0.206376\n#> recall              0.571429   0.625000\n#> residual_deviance 107.586716 122.094444\n#> rmse                0.261246   0.285212\n#> specificity         0.989247   0.907104\n```\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-33_5daf29ca9e903e47de4840647aca39b7'}\n\n```{.r .cell-code}\n#h2o.getModel(\"DeepLearning_1_AutoML_1_20230524_195722\") %>% \n#  h2o.saveModel(path = \"04_Modeling/h20_models/\")\n\n#h2o.loadModel(\"04_Modeling/h20_models/DRF_1_AutoML_1_20230523_214315\")\n```\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-34_51b30b15609738a3bc49e1f9eaaf27b4'}\n\n```{.r .cell-code}\n# Choose whatever model you want\nstacked_ensemble_h2o <- h2o.loadModel(\"DeepLearning_1_AutoML_1_20230524_195722\")\nstacked_ensemble_h2o\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: deeplearning\n#> Model ID:  DeepLearning_1_AutoML_1_20230524_195722 \n#> Status of Neuron Layers: predicting Attrition, 2-class classification, bernoulli distribution, CrossEntropy loss, 1.202 weights/biases, 25,7 KB, 11.998 training samples, mini-batch size 1\n#>   layer units      type dropout       l1       l2 mean_rate rate_rms momentum\n#> 1     1    95     Input  0.00 %       NA       NA        NA       NA       NA\n#> 2     2    10 Rectifier  0.00 % 0.000000 0.000000  0.170604 0.383497 0.000000\n#> 3     3    10 Rectifier  0.00 % 0.000000 0.000000  0.001880 0.001938 0.000000\n#> 4     4    10 Rectifier  0.00 % 0.000000 0.000000  0.001141 0.001270 0.000000\n#> 5     5     2   Softmax      NA 0.000000 0.000000  0.002060 0.001610 0.000000\n#>   mean_weight weight_rms mean_bias bias_rms\n#> 1          NA         NA        NA       NA\n#> 2   -0.000715   0.136980  0.509535 0.096139\n#> 3    0.012046   0.321003  0.999899 0.071591\n#> 4   -0.025861   0.294297  0.994634 0.048070\n#> 5    0.218097   1.498820 -0.001475 0.055308\n#> \n#> \n#> H2OBinomialMetrics: deeplearning\n#> ** Reported on training data. **\n#> ** Metrics reported on full training frame **\n#> \n#> MSE:  0.06692099\n#> RMSE:  0.2586909\n#> LogLoss:  0.239369\n#> Mean Per-Class Error:  0.1758153\n#> AUC:  0.8989176\n#> AUCPR:  0.7409045\n#> Gini:  0.7978353\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error      Rate\n#> No     865  44 0.048405   =44/909\n#> Yes     47 108 0.303226   =47/155\n#> Totals 912 152 0.085526  =91/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.333843   0.703583 133\n#> 2                       max f2  0.208831   0.705813 184\n#> 3                 max f0point5  0.520297   0.747748  88\n#> 4                 max accuracy  0.429840   0.918233  99\n#> 5                max precision  0.997492   1.000000   0\n#> 6                   max recall  0.002427   1.000000 395\n#> 7              max specificity  0.997492   1.000000   0\n#> 8             max absolute_mcc  0.333843   0.653659 133\n#> 9   max min_per_class_accuracy  0.145989   0.812903 219\n#> 10 max mean_per_class_accuracy  0.208831   0.826665 184\n#> 11                     max tns  0.997492 909.000000   0\n#> 12                     max fns  0.997492 154.000000   0\n#> 13                     max fps  0.000622 909.000000 399\n#> 14                     max tps  0.002427 155.000000 395\n#> 15                     max tnr  0.997492   1.000000   0\n#> 16                     max fnr  0.997492   0.993548   0\n#> 17                     max fpr  0.000622   1.000000 399\n#> 18                     max tpr  0.002427   1.000000 395\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: deeplearning\n#> ** Reported on validation data. **\n#> ** Metrics reported on full validation frame **\n#> \n#> MSE:  0.1026735\n#> RMSE:  0.320427\n#> LogLoss:  0.3369246\n#> Mean Per-Class Error:  0.211869\n#> AUC:  0.867526\n#> AUCPR:  0.7008473\n#> Gini:  0.7350519\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error     Rate\n#> No     135  12 0.081633  =12/147\n#> Yes     13  25 0.342105   =13/38\n#> Totals 148  37 0.135135  =25/185\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.364261   0.666667  36\n#> 2                       max f2  0.134723   0.750000  67\n#> 3                 max f0point5  0.414085   0.696203  29\n#> 4                 max accuracy  0.414085   0.870270  29\n#> 5                max precision  0.994919   1.000000   0\n#> 6                   max recall  0.009348   1.000000 160\n#> 7              max specificity  0.994919   1.000000   0\n#> 8             max absolute_mcc  0.364261   0.582021  36\n#> 9   max min_per_class_accuracy  0.188734   0.789474  58\n#> 10 max mean_per_class_accuracy  0.134723   0.815163  67\n#> 11                     max tns  0.994919 147.000000   0\n#> 12                     max fns  0.994919  37.000000   0\n#> 13                     max fps  0.001045 147.000000 184\n#> 14                     max tps  0.009348  38.000000 160\n#> 15                     max tnr  0.994919   1.000000   0\n#> 16                     max fnr  0.994919   0.973684   0\n#> 17                     max fpr  0.001045   1.000000 184\n#> 18                     max tpr  0.009348   1.000000 160\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: deeplearning\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.09848229\n#> RMSE:  0.3138189\n#> LogLoss:  0.3390082\n#> Mean Per-Class Error:  0.2860144\n#> AUC:  0.7930871\n#> AUCPR:  0.4844503\n#> Gini:  0.5861741\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error       Rate\n#> No     823  86 0.094609    =86/909\n#> Yes     74  81 0.477419    =74/155\n#> Totals 897 167 0.150376  =160/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.253595   0.503106 130\n#> 2                       max f2  0.109777   0.577889 232\n#> 3                 max f0point5  0.428265   0.551102  72\n#> 4                 max accuracy  0.487139   0.878759  54\n#> 5                max precision  0.976322   1.000000   0\n#> 6                   max recall  0.006325   1.000000 388\n#> 7              max specificity  0.976322   1.000000   0\n#> 8             max absolute_mcc  0.277464   0.416306 121\n#> 9   max min_per_class_accuracy  0.115044   0.722581 227\n#> 10 max mean_per_class_accuracy  0.177680   0.736446 171\n#> 11                     max tns  0.976322 909.000000   0\n#> 12                     max fns  0.976322 154.000000   0\n#> 13                     max fps  0.001078 909.000000 399\n#> 14                     max tps  0.006325 155.000000 388\n#> 15                     max tnr  0.976322   1.000000   0\n#> 16                     max fnr  0.976322   0.993548   0\n#> 17                     max fpr  0.001078   1.000000 399\n#> 18                     max tpr  0.006325   1.000000 388\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                              mean       sd cv_1_valid cv_2_valid cv_3_valid\n#> accuracy                 0.854332 0.042995   0.784038   0.849765   0.877934\n#> auc                      0.792739 0.029235   0.768366   0.825173   0.788860\n#> err                      0.145668 0.042995   0.215962   0.150235   0.122066\n#> err_count               31.000000 9.165152  46.000000  32.000000  26.000000\n#> f0point5                 0.537624 0.114784   0.364807   0.550459   0.616438\n#> f1                       0.533413 0.068179   0.425000   0.600000   0.580645\n#> f2                       0.547807 0.085503   0.508982   0.659341   0.548781\n#> lift_top_group           4.965196 1.692645   4.896552   4.176471   6.264706\n#> logloss                  0.338977 0.021677   0.363298   0.334220   0.350682\n#> max_per_class_error      0.432354 0.119745   0.413793   0.294118   0.470588\n#> mcc                      0.466691 0.083075   0.322603   0.518896   0.513290\n#> mean_per_class_accuracy  0.735549 0.043726   0.700712   0.791489   0.736773\n#> mean_per_class_error     0.264451 0.043726   0.299288   0.208511   0.263227\n#> mse                      0.098475 0.006824   0.108420   0.099946   0.099735\n#> pr_auc                   0.494855 0.087045   0.374665   0.513816   0.582080\n#> precision                0.554030 0.176659   0.333333   0.521739   0.642857\n#> r2                       0.204180 0.076910   0.078163   0.254940   0.256512\n#> recall                   0.567646 0.119745   0.586207   0.705882   0.529412\n#> rmse                     0.313658 0.010822   0.329272   0.316142   0.315808\n#> specificity              0.903452 0.064388   0.815217   0.877095   0.944134\n#>                         cv_4_valid cv_5_valid\n#> accuracy                  0.896714   0.863208\n#> auc                       0.761078   0.820220\n#> err                       0.103286   0.136792\n#> err_count                22.000000  29.000000\n#> f0point5                  0.659341   0.497076\n#> f1                        0.521739   0.539683\n#> f2                        0.431655   0.590278\n#> lift_top_group            6.870968   2.617284\n#> logloss                   0.341224   0.305459\n#> max_per_class_error       0.612903   0.370370\n#> mcc                       0.510810   0.467854\n#> mean_per_class_accuracy   0.685307   0.763463\n#> mean_per_class_error      0.314693   0.236537\n#> mse                       0.093414   0.090860\n#> pr_auc                    0.564291   0.439422\n#> precision                 0.800000   0.472222\n#> r2                        0.248827   0.182457\n#> recall                    0.387097   0.629630\n#> rmse                      0.305638   0.301431\n#> specificity               0.983516   0.897297\n```\n:::\n\n```{.r .cell-code}\npredictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntypeof(predictions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"environment\"\n```\n:::\n\n```{.r .cell-code}\n## [1] \"environment\"\n\npredictions_tbl <- predictions %>% as_tibble()\n\npredictions_tbl\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"predict\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"No\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Yes\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"No\",\"2\":\"0.93853401\",\"3\":\"0.061465992\"},{\"1\":\"No\",\"2\":\"0.78413027\",\"3\":\"0.215869730\"},{\"1\":\"No\",\"2\":\"0.91225216\",\"3\":\"0.087747842\"},{\"1\":\"No\",\"2\":\"0.88638561\",\"3\":\"0.113614389\"},{\"1\":\"No\",\"2\":\"0.98663389\",\"3\":\"0.013366112\"},{\"1\":\"No\",\"2\":\"0.99398434\",\"3\":\"0.006015660\"},{\"1\":\"No\",\"2\":\"0.99561521\",\"3\":\"0.004384787\"},{\"1\":\"Yes\",\"2\":\"0.10982799\",\"3\":\"0.890172010\"},{\"1\":\"Yes\",\"2\":\"0.07982769\",\"3\":\"0.920172310\"},{\"1\":\"No\",\"2\":\"0.99702395\",\"3\":\"0.002976045\"},{\"1\":\"No\",\"2\":\"0.81466519\",\"3\":\"0.185334809\"},{\"1\":\"No\",\"2\":\"0.94931437\",\"3\":\"0.050685633\"},{\"1\":\"No\",\"2\":\"0.96691971\",\"3\":\"0.033080287\"},{\"1\":\"No\",\"2\":\"0.99723269\",\"3\":\"0.002767305\"},{\"1\":\"No\",\"2\":\"0.95103804\",\"3\":\"0.048961960\"},{\"1\":\"No\",\"2\":\"0.87581990\",\"3\":\"0.124180104\"},{\"1\":\"No\",\"2\":\"0.99795290\",\"3\":\"0.002047104\"},{\"1\":\"No\",\"2\":\"0.74955518\",\"3\":\"0.250444821\"},{\"1\":\"No\",\"2\":\"0.94040533\",\"3\":\"0.059594669\"},{\"1\":\"No\",\"2\":\"0.85433141\",\"3\":\"0.145668594\"},{\"1\":\"No\",\"2\":\"0.98045651\",\"3\":\"0.019543486\"},{\"1\":\"Yes\",\"2\":\"0.16749971\",\"3\":\"0.832500291\"},{\"1\":\"No\",\"2\":\"0.95919366\",\"3\":\"0.040806337\"},{\"1\":\"No\",\"2\":\"0.92232466\",\"3\":\"0.077675342\"},{\"1\":\"No\",\"2\":\"0.70569342\",\"3\":\"0.294306579\"},{\"1\":\"No\",\"2\":\"0.97525961\",\"3\":\"0.024740391\"},{\"1\":\"No\",\"2\":\"0.85861117\",\"3\":\"0.141388825\"},{\"1\":\"No\",\"2\":\"0.87724540\",\"3\":\"0.122754598\"},{\"1\":\"No\",\"2\":\"0.98628708\",\"3\":\"0.013712924\"},{\"1\":\"No\",\"2\":\"0.97386246\",\"3\":\"0.026137537\"},{\"1\":\"No\",\"2\":\"0.97141935\",\"3\":\"0.028580646\"},{\"1\":\"No\",\"2\":\"0.98268600\",\"3\":\"0.017314000\"},{\"1\":\"No\",\"2\":\"0.97886458\",\"3\":\"0.021135423\"},{\"1\":\"No\",\"2\":\"0.70011851\",\"3\":\"0.299881493\"},{\"1\":\"No\",\"2\":\"0.98441197\",\"3\":\"0.015588026\"},{\"1\":\"Yes\",\"2\":\"0.27195454\",\"3\":\"0.728045458\"},{\"1\":\"No\",\"2\":\"0.99304640\",\"3\":\"0.006953603\"},{\"1\":\"No\",\"2\":\"0.99794938\",\"3\":\"0.002050622\"},{\"1\":\"No\",\"2\":\"0.92761380\",\"3\":\"0.072386200\"},{\"1\":\"No\",\"2\":\"0.91238294\",\"3\":\"0.087617064\"},{\"1\":\"No\",\"2\":\"0.97386696\",\"3\":\"0.026133036\"},{\"1\":\"No\",\"2\":\"0.99659588\",\"3\":\"0.003404121\"},{\"1\":\"No\",\"2\":\"0.84737287\",\"3\":\"0.152627132\"},{\"1\":\"No\",\"2\":\"0.97620132\",\"3\":\"0.023798676\"},{\"1\":\"No\",\"2\":\"0.92150832\",\"3\":\"0.078491680\"},{\"1\":\"No\",\"2\":\"0.67869728\",\"3\":\"0.321302722\"},{\"1\":\"No\",\"2\":\"0.98887644\",\"3\":\"0.011123557\"},{\"1\":\"No\",\"2\":\"0.93336289\",\"3\":\"0.066637113\"},{\"1\":\"No\",\"2\":\"0.98404649\",\"3\":\"0.015953510\"},{\"1\":\"No\",\"2\":\"0.98460501\",\"3\":\"0.015394992\"},{\"1\":\"No\",\"2\":\"0.98825332\",\"3\":\"0.011746680\"},{\"1\":\"No\",\"2\":\"0.88511267\",\"3\":\"0.114887333\"},{\"1\":\"Yes\",\"2\":\"0.56482814\",\"3\":\"0.435171860\"},{\"1\":\"No\",\"2\":\"0.99231693\",\"3\":\"0.007683073\"},{\"1\":\"No\",\"2\":\"0.95922295\",\"3\":\"0.040777050\"},{\"1\":\"No\",\"2\":\"0.98049345\",\"3\":\"0.019506552\"},{\"1\":\"No\",\"2\":\"0.99346993\",\"3\":\"0.006530068\"},{\"1\":\"No\",\"2\":\"0.96972767\",\"3\":\"0.030272334\"},{\"1\":\"No\",\"2\":\"0.98935591\",\"3\":\"0.010644086\"},{\"1\":\"No\",\"2\":\"0.95536097\",\"3\":\"0.044639026\"},{\"1\":\"No\",\"2\":\"0.87695875\",\"3\":\"0.123041250\"},{\"1\":\"No\",\"2\":\"0.94217007\",\"3\":\"0.057829934\"},{\"1\":\"No\",\"2\":\"0.98794362\",\"3\":\"0.012056376\"},{\"1\":\"No\",\"2\":\"0.95073130\",\"3\":\"0.049268701\"},{\"1\":\"No\",\"2\":\"0.71649921\",\"3\":\"0.283500788\"},{\"1\":\"No\",\"2\":\"0.88979357\",\"3\":\"0.110206434\"},{\"1\":\"No\",\"2\":\"0.96823918\",\"3\":\"0.031760824\"},{\"1\":\"No\",\"2\":\"0.99736008\",\"3\":\"0.002639918\"},{\"1\":\"No\",\"2\":\"0.81008341\",\"3\":\"0.189916590\"},{\"1\":\"No\",\"2\":\"0.98037247\",\"3\":\"0.019627525\"},{\"1\":\"No\",\"2\":\"0.78847785\",\"3\":\"0.211522153\"},{\"1\":\"No\",\"2\":\"0.79376976\",\"3\":\"0.206230244\"},{\"1\":\"No\",\"2\":\"0.85212838\",\"3\":\"0.147871624\"},{\"1\":\"No\",\"2\":\"0.98527461\",\"3\":\"0.014725389\"},{\"1\":\"No\",\"2\":\"0.85630676\",\"3\":\"0.143693237\"},{\"1\":\"No\",\"2\":\"0.99847622\",\"3\":\"0.001523779\"},{\"1\":\"No\",\"2\":\"0.99457927\",\"3\":\"0.005420731\"},{\"1\":\"No\",\"2\":\"0.85132495\",\"3\":\"0.148675046\"},{\"1\":\"No\",\"2\":\"0.97871429\",\"3\":\"0.021285709\"},{\"1\":\"No\",\"2\":\"0.99363589\",\"3\":\"0.006364108\"},{\"1\":\"No\",\"2\":\"0.98991518\",\"3\":\"0.010084815\"},{\"1\":\"No\",\"2\":\"0.99871739\",\"3\":\"0.001282609\"},{\"1\":\"No\",\"2\":\"0.87676755\",\"3\":\"0.123232446\"},{\"1\":\"No\",\"2\":\"0.95974054\",\"3\":\"0.040259463\"},{\"1\":\"No\",\"2\":\"0.97831654\",\"3\":\"0.021683458\"},{\"1\":\"No\",\"2\":\"0.96326797\",\"3\":\"0.036732029\"},{\"1\":\"No\",\"2\":\"0.99233194\",\"3\":\"0.007668055\"},{\"1\":\"No\",\"2\":\"0.96523582\",\"3\":\"0.034764177\"},{\"1\":\"No\",\"2\":\"0.98996433\",\"3\":\"0.010035666\"},{\"1\":\"No\",\"2\":\"0.73595820\",\"3\":\"0.264041798\"},{\"1\":\"Yes\",\"2\":\"0.09400886\",\"3\":\"0.905991144\"},{\"1\":\"No\",\"2\":\"0.99812168\",\"3\":\"0.001878316\"},{\"1\":\"No\",\"2\":\"0.98466513\",\"3\":\"0.015334872\"},{\"1\":\"No\",\"2\":\"0.98218977\",\"3\":\"0.017810231\"},{\"1\":\"No\",\"2\":\"0.92333548\",\"3\":\"0.076664516\"},{\"1\":\"No\",\"2\":\"0.97926074\",\"3\":\"0.020739260\"},{\"1\":\"No\",\"2\":\"0.99402957\",\"3\":\"0.005970427\"},{\"1\":\"No\",\"2\":\"0.85497648\",\"3\":\"0.145023525\"},{\"1\":\"No\",\"2\":\"0.98967656\",\"3\":\"0.010323440\"},{\"1\":\"No\",\"2\":\"0.82334225\",\"3\":\"0.176657747\"},{\"1\":\"No\",\"2\":\"0.98624563\",\"3\":\"0.013754370\"},{\"1\":\"Yes\",\"2\":\"0.59804221\",\"3\":\"0.401957792\"},{\"1\":\"No\",\"2\":\"0.99046396\",\"3\":\"0.009536042\"},{\"1\":\"No\",\"2\":\"0.64543858\",\"3\":\"0.354561417\"},{\"1\":\"No\",\"2\":\"0.86809008\",\"3\":\"0.131909917\"},{\"1\":\"No\",\"2\":\"0.96481808\",\"3\":\"0.035181916\"},{\"1\":\"No\",\"2\":\"0.97600886\",\"3\":\"0.023991144\"},{\"1\":\"No\",\"2\":\"0.87273000\",\"3\":\"0.127269997\"},{\"1\":\"No\",\"2\":\"0.84164638\",\"3\":\"0.158353618\"},{\"1\":\"Yes\",\"2\":\"0.55069597\",\"3\":\"0.449304030\"},{\"1\":\"No\",\"2\":\"0.92322351\",\"3\":\"0.076776490\"},{\"1\":\"Yes\",\"2\":\"0.19850929\",\"3\":\"0.801490714\"},{\"1\":\"No\",\"2\":\"0.76977068\",\"3\":\"0.230229320\"},{\"1\":\"No\",\"2\":\"0.96304308\",\"3\":\"0.036956917\"},{\"1\":\"No\",\"2\":\"0.98748918\",\"3\":\"0.012510823\"},{\"1\":\"No\",\"2\":\"0.97980698\",\"3\":\"0.020193017\"},{\"1\":\"Yes\",\"2\":\"0.18700215\",\"3\":\"0.812997845\"},{\"1\":\"Yes\",\"2\":\"0.23619838\",\"3\":\"0.763801615\"},{\"1\":\"No\",\"2\":\"0.94021887\",\"3\":\"0.059781128\"},{\"1\":\"No\",\"2\":\"0.92490016\",\"3\":\"0.075099837\"},{\"1\":\"No\",\"2\":\"0.99634605\",\"3\":\"0.003653954\"},{\"1\":\"No\",\"2\":\"0.98874303\",\"3\":\"0.011256965\"},{\"1\":\"No\",\"2\":\"0.89899640\",\"3\":\"0.101003605\"},{\"1\":\"Yes\",\"2\":\"0.13937658\",\"3\":\"0.860623423\"},{\"1\":\"No\",\"2\":\"0.98084699\",\"3\":\"0.019153010\"},{\"1\":\"Yes\",\"2\":\"0.35642694\",\"3\":\"0.643573057\"},{\"1\":\"No\",\"2\":\"0.95421658\",\"3\":\"0.045783419\"},{\"1\":\"No\",\"2\":\"0.70624126\",\"3\":\"0.293758739\"},{\"1\":\"No\",\"2\":\"0.68561798\",\"3\":\"0.314382020\"},{\"1\":\"No\",\"2\":\"0.87981698\",\"3\":\"0.120183023\"},{\"1\":\"No\",\"2\":\"0.67579422\",\"3\":\"0.324205783\"},{\"1\":\"No\",\"2\":\"0.99625378\",\"3\":\"0.003746216\"},{\"1\":\"No\",\"2\":\"0.98125196\",\"3\":\"0.018748038\"},{\"1\":\"No\",\"2\":\"0.77075003\",\"3\":\"0.229249973\"},{\"1\":\"No\",\"2\":\"0.96970712\",\"3\":\"0.030292884\"},{\"1\":\"No\",\"2\":\"0.89803069\",\"3\":\"0.101969309\"},{\"1\":\"No\",\"2\":\"0.97522150\",\"3\":\"0.024778496\"},{\"1\":\"No\",\"2\":\"0.80661377\",\"3\":\"0.193386231\"},{\"1\":\"No\",\"2\":\"0.92945022\",\"3\":\"0.070549779\"},{\"1\":\"No\",\"2\":\"0.87856205\",\"3\":\"0.121437948\"},{\"1\":\"Yes\",\"2\":\"0.46811663\",\"3\":\"0.531883371\"},{\"1\":\"No\",\"2\":\"0.93537703\",\"3\":\"0.064622965\"},{\"1\":\"No\",\"2\":\"0.84035604\",\"3\":\"0.159643956\"},{\"1\":\"No\",\"2\":\"0.97434804\",\"3\":\"0.025651962\"},{\"1\":\"Yes\",\"2\":\"0.51698650\",\"3\":\"0.483013496\"},{\"1\":\"No\",\"2\":\"0.99559971\",\"3\":\"0.004400291\"},{\"1\":\"No\",\"2\":\"0.93051072\",\"3\":\"0.069489277\"},{\"1\":\"No\",\"2\":\"0.87540987\",\"3\":\"0.124590134\"},{\"1\":\"Yes\",\"2\":\"0.01141479\",\"3\":\"0.988585206\"},{\"1\":\"No\",\"2\":\"0.84083827\",\"3\":\"0.159161732\"},{\"1\":\"No\",\"2\":\"0.98343836\",\"3\":\"0.016561637\"},{\"1\":\"No\",\"2\":\"0.94345639\",\"3\":\"0.056543609\"},{\"1\":\"Yes\",\"2\":\"0.04746100\",\"3\":\"0.952538996\"},{\"1\":\"No\",\"2\":\"0.97809663\",\"3\":\"0.021903365\"},{\"1\":\"No\",\"2\":\"0.99077228\",\"3\":\"0.009227718\"},{\"1\":\"No\",\"2\":\"0.99064256\",\"3\":\"0.009357441\"},{\"1\":\"No\",\"2\":\"0.91955142\",\"3\":\"0.080448578\"},{\"1\":\"Yes\",\"2\":\"0.56375219\",\"3\":\"0.436247805\"},{\"1\":\"No\",\"2\":\"0.65756185\",\"3\":\"0.342438148\"},{\"1\":\"No\",\"2\":\"0.84901918\",\"3\":\"0.150980822\"},{\"1\":\"No\",\"2\":\"0.96885826\",\"3\":\"0.031141739\"},{\"1\":\"No\",\"2\":\"0.72729981\",\"3\":\"0.272700193\"},{\"1\":\"Yes\",\"2\":\"0.49255350\",\"3\":\"0.507446499\"},{\"1\":\"No\",\"2\":\"0.91308305\",\"3\":\"0.086916954\"},{\"1\":\"No\",\"2\":\"0.95990355\",\"3\":\"0.040096445\"},{\"1\":\"No\",\"2\":\"0.94074813\",\"3\":\"0.059251870\"},{\"1\":\"No\",\"2\":\"0.94134393\",\"3\":\"0.058656073\"},{\"1\":\"Yes\",\"2\":\"0.30050379\",\"3\":\"0.699496213\"},{\"1\":\"No\",\"2\":\"0.92666989\",\"3\":\"0.073330113\"},{\"1\":\"No\",\"2\":\"0.97636119\",\"3\":\"0.023638815\"},{\"1\":\"Yes\",\"2\":\"0.32031173\",\"3\":\"0.679688267\"},{\"1\":\"No\",\"2\":\"0.75055663\",\"3\":\"0.249443374\"},{\"1\":\"No\",\"2\":\"0.67524474\",\"3\":\"0.324755265\"},{\"1\":\"No\",\"2\":\"0.95880103\",\"3\":\"0.041198975\"},{\"1\":\"Yes\",\"2\":\"0.63262663\",\"3\":\"0.367373369\"},{\"1\":\"No\",\"2\":\"0.87853367\",\"3\":\"0.121466330\"},{\"1\":\"No\",\"2\":\"0.98722811\",\"3\":\"0.012771889\"},{\"1\":\"No\",\"2\":\"0.98480689\",\"3\":\"0.015193108\"},{\"1\":\"No\",\"2\":\"0.76221411\",\"3\":\"0.237785895\"},{\"1\":\"No\",\"2\":\"0.93356576\",\"3\":\"0.066434239\"},{\"1\":\"No\",\"2\":\"0.98482650\",\"3\":\"0.015173496\"},{\"1\":\"Yes\",\"2\":\"0.02812417\",\"3\":\"0.971875825\"},{\"1\":\"No\",\"2\":\"0.91579842\",\"3\":\"0.084201579\"},{\"1\":\"No\",\"2\":\"0.99363312\",\"3\":\"0.006366877\"},{\"1\":\"No\",\"2\":\"0.98616781\",\"3\":\"0.013832187\"},{\"1\":\"Yes\",\"2\":\"0.17739333\",\"3\":\"0.822606671\"},{\"1\":\"Yes\",\"2\":\"0.62852012\",\"3\":\"0.371479879\"},{\"1\":\"No\",\"2\":\"0.94955079\",\"3\":\"0.050449211\"},{\"1\":\"No\",\"2\":\"0.71351032\",\"3\":\"0.286489676\"},{\"1\":\"No\",\"2\":\"0.99461589\",\"3\":\"0.005384114\"},{\"1\":\"No\",\"2\":\"0.92970385\",\"3\":\"0.070296147\"},{\"1\":\"No\",\"2\":\"0.93632014\",\"3\":\"0.063679859\"},{\"1\":\"No\",\"2\":\"0.98413694\",\"3\":\"0.015863063\"},{\"1\":\"Yes\",\"2\":\"0.63473003\",\"3\":\"0.365269973\"},{\"1\":\"No\",\"2\":\"0.78232279\",\"3\":\"0.217677208\"},{\"1\":\"No\",\"2\":\"0.64097642\",\"3\":\"0.359023583\"},{\"1\":\"No\",\"2\":\"0.94716468\",\"3\":\"0.052835324\"},{\"1\":\"No\",\"2\":\"0.98460109\",\"3\":\"0.015398914\"},{\"1\":\"No\",\"2\":\"0.84599272\",\"3\":\"0.154007284\"},{\"1\":\"No\",\"2\":\"0.63803615\",\"3\":\"0.361963846\"},{\"1\":\"No\",\"2\":\"0.98028261\",\"3\":\"0.019717387\"},{\"1\":\"No\",\"2\":\"0.98620728\",\"3\":\"0.013792720\"},{\"1\":\"No\",\"2\":\"0.73040245\",\"3\":\"0.269597550\"},{\"1\":\"No\",\"2\":\"0.98313554\",\"3\":\"0.016864461\"},{\"1\":\"No\",\"2\":\"0.91812351\",\"3\":\"0.081876486\"},{\"1\":\"No\",\"2\":\"0.95657273\",\"3\":\"0.043427266\"},{\"1\":\"Yes\",\"2\":\"0.24519919\",\"3\":\"0.754800805\"},{\"1\":\"No\",\"2\":\"0.98188616\",\"3\":\"0.018113842\"},{\"1\":\"No\",\"2\":\"0.97495940\",\"3\":\"0.025040602\"},{\"1\":\"No\",\"2\":\"0.96736086\",\"3\":\"0.032639139\"},{\"1\":\"No\",\"2\":\"0.91404417\",\"3\":\"0.085955826\"},{\"1\":\"No\",\"2\":\"0.76074406\",\"3\":\"0.239255936\"},{\"1\":\"No\",\"2\":\"0.96848149\",\"3\":\"0.031518506\"},{\"1\":\"No\",\"2\":\"0.67955703\",\"3\":\"0.320442966\"},{\"1\":\"No\",\"2\":\"0.99156437\",\"3\":\"0.008435630\"},{\"1\":\"No\",\"2\":\"0.97586292\",\"3\":\"0.024137078\"},{\"1\":\"No\",\"2\":\"0.77043474\",\"3\":\"0.229565257\"},{\"1\":\"No\",\"2\":\"0.96015605\",\"3\":\"0.039843946\"},{\"1\":\"No\",\"2\":\"0.89143362\",\"3\":\"0.108566379\"},{\"1\":\"No\",\"2\":\"0.98563642\",\"3\":\"0.014363578\"},{\"1\":\"No\",\"2\":\"0.93733609\",\"3\":\"0.062663913\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-35_c9ddc83f7ee72ebd54a4953051b943c2'}\n\n```{.r .cell-code}\ndeep_learning_h2o <- h2o.loadModel(\"DeepLearning_1_AutoML_1_20230524_195722\")\n\n# To see all possible parameters\n?h2o.deeplearning\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> starte den http Server für die Hilfe fertig\n```\n:::\n\n```{.r .cell-code}\n# to get all paramteres\ndeep_learning_h2o@allparameters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $model_id\n#> [1] \"DeepLearning_1_AutoML_1_20230524_195722\"\n#> \n#> $nfolds\n#> [1] 5\n#> \n#> $keep_cross_validation_models\n#> [1] FALSE\n#> \n#> $keep_cross_validation_predictions\n#> [1] TRUE\n#> \n#> $keep_cross_validation_fold_assignment\n#> [1] FALSE\n#> \n#> $fold_assignment\n#> [1] \"Modulo\"\n#> \n#> $ignore_const_cols\n#> [1] TRUE\n#> \n#> $score_each_iteration\n#> [1] FALSE\n#> \n#> $balance_classes\n#> [1] FALSE\n#> \n#> $max_after_balance_size\n#> [1] 5\n#> \n#> $max_confusion_matrix_size\n#> [1] 20\n#> \n#> $overwrite_with_best_model\n#> [1] FALSE\n#> \n#> $use_all_factor_levels\n#> [1] TRUE\n#> \n#> $standardize\n#> [1] TRUE\n#> \n#> $activation\n#> [1] \"Rectifier\"\n#> \n#> $hidden\n#> [1] 10 10 10\n#> \n#> $epochs\n#> [1] 10.3602\n#> \n#> $train_samples_per_iteration\n#> [1] -2\n#> \n#> $target_ratio_comm_to_comp\n#> [1] 0.05\n#> \n#> $seed\n#> [1] \"8785999559547214598\"\n#> \n#> $adaptive_rate\n#> [1] TRUE\n#> \n#> $rho\n#> [1] 0.99\n#> \n#> $epsilon\n#> [1] 1e-08\n#> \n#> $rate\n#> [1] 0.005\n#> \n#> $rate_annealing\n#> [1] 1e-06\n#> \n#> $rate_decay\n#> [1] 1\n#> \n#> $momentum_start\n#> [1] 0\n#> \n#> $momentum_ramp\n#> [1] 1e+06\n#> \n#> $momentum_stable\n#> [1] 0\n#> \n#> $nesterov_accelerated_gradient\n#> [1] TRUE\n#> \n#> $input_dropout_ratio\n#> [1] 0\n#> \n#> $l1\n#> [1] 0\n#> \n#> $l2\n#> [1] 0\n#> \n#> $max_w2\n#> [1] 3.402823e+38\n#> \n#> $initial_weight_distribution\n#> [1] \"UniformAdaptive\"\n#> \n#> $initial_weight_scale\n#> [1] 1\n#> \n#> $loss\n#> [1] \"Automatic\"\n#> \n#> $distribution\n#> [1] \"bernoulli\"\n#> \n#> $quantile_alpha\n#> [1] 0.5\n#> \n#> $tweedie_power\n#> [1] 1.5\n#> \n#> $huber_alpha\n#> [1] 0.9\n#> \n#> $score_interval\n#> [1] 5\n#> \n#> $score_training_samples\n#> [1] 10000\n#> \n#> $score_validation_samples\n#> [1] 0\n#> \n#> $score_duty_cycle\n#> [1] 0.1\n#> \n#> $classification_stop\n#> [1] 0\n#> \n#> $regression_stop\n#> [1] 1e-06\n#> \n#> $stopping_rounds\n#> [1] 0\n#> \n#> $stopping_metric\n#> [1] \"logloss\"\n#> \n#> $stopping_tolerance\n#> [1] 0.03065697\n#> \n#> $max_runtime_secs\n#> [1] 10.584\n#> \n#> $score_validation_sampling\n#> [1] \"Uniform\"\n#> \n#> $diagnostics\n#> [1] TRUE\n#> \n#> $fast_mode\n#> [1] TRUE\n#> \n#> $force_load_balance\n#> [1] TRUE\n#> \n#> $variable_importances\n#> [1] TRUE\n#> \n#> $replicate_training_data\n#> [1] TRUE\n#> \n#> $single_node_mode\n#> [1] FALSE\n#> \n#> $shuffle_training_data\n#> [1] FALSE\n#> \n#> $missing_values_handling\n#> [1] \"MeanImputation\"\n#> \n#> $quiet_mode\n#> [1] FALSE\n#> \n#> $autoencoder\n#> [1] FALSE\n#> \n#> $sparse\n#> [1] FALSE\n#> \n#> $col_major\n#> [1] FALSE\n#> \n#> $average_activation\n#> [1] 0\n#> \n#> $sparsity_beta\n#> [1] 0\n#> \n#> $max_categorical_features\n#> [1] 2147483647\n#> \n#> $reproducible\n#> [1] FALSE\n#> \n#> $export_weights_and_biases\n#> [1] FALSE\n#> \n#> $mini_batch_size\n#> [1] 1\n#> \n#> $categorical_encoding\n#> [1] \"OneHotInternal\"\n#> \n#> $elastic_averaging\n#> [1] FALSE\n#> \n#> $elastic_averaging_moving_rate\n#> [1] 0.9\n#> \n#> $elastic_averaging_regularization\n#> [1] 0.001\n#> \n#> $auc_type\n#> [1] \"AUTO\"\n#> \n#> $x\n#>  [1] \"JobRole\"                  \"EducationField\"          \n#>  [3] \"JobLevel\"                 \"Education\"               \n#>  [5] \"EnvironmentSatisfaction\"  \"JobInvolvement\"          \n#>  [7] \"JobSatisfaction\"          \"RelationshipSatisfaction\"\n#>  [9] \"StockOptionLevel\"         \"WorkLifeBalance\"         \n#> [11] \"Department\"               \"BusinessTravel\"          \n#> [13] \"MaritalStatus\"            \"Gender\"                  \n#> [15] \"OverTime\"                 \"PerformanceRating\"       \n#> [17] \"Age\"                      \"DailyRate\"               \n#> [19] \"DistanceFromHome\"         \"EmployeeNumber\"          \n#> [21] \"HourlyRate\"               \"MonthlyIncome\"           \n#> [23] \"MonthlyRate\"              \"NumCompaniesWorked\"      \n#> [25] \"PercentSalaryHike\"        \"TotalWorkingYears\"       \n#> [27] \"TrainingTimesLastYear\"    \"YearsAtCompany\"          \n#> [29] \"YearsInCurrentRole\"       \"YearsSinceLastPromotion\" \n#> [31] \"YearsWithCurrManager\"    \n#> \n#> $y\n#> [1] \"Attrition\"\n```\n:::\n:::\n\n#Challenge 4\n#1. Load the training & test dataset\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-36_cf0f6d39f7f2689d1242ce8c5bb8cc89'}\n\n```{.r .cell-code}\nproduct_backorder_tbl          <- read_csv(\"product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n#2. Specifiy the response and predictor variables\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-37_0884aa0483f1f8a69159d791969d93fe'}\n\n```{.r .cell-code}\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(product_backorder_tbl, prop = 0.85)\ntrain_readable_tbl              <- training(split_obj)\ntest_readable_tbl               <- testing(split_obj)\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% \n    step_zv(all_predictors()) %>% \n    prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n```\n:::\n\n#Modeling\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-38_14ab36d482e05bbae47598ec9557ba89'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         29 minutes 8 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 21 days \n#>     H2O cluster name:           H2O_started_from_R_tiend_ham688 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.72 GB \n#>     H2O cluster total cores:    12 \n#>     H2O cluster allowed cores:  12 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15 ucrt)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 21 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n```\n:::\n\n```{.r .cell-code}\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# Set the target and predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n```\n:::\n\n# 3. Run AutoML specifying the stopping criterion\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-39_efd77d57e9a88c774d87b5e4ac16a89a'}\n\n```{.r .cell-code}\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n#> 22:26:32.275: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 22:26:32.277: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=================================                                     |  46%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n# 4. View the leaderboard\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-40_8a4ff2d70e20413e99ab8a59b0b66c41'}\n\n```{.r .cell-code}\ntypeof(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"S4\"\n```\n:::\n\n```{.r .cell-code}\n## \"S4\"\n\nslotNames(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n```\n:::\n\n```{.r .cell-code}\n## [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"      \"modeling_steps\" \"training_info\" \n\nautoml_models_h2o@leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_2_AutoML_5_20230529_222632 0.9494713 0.1745690\n#> 2    StackedEnsemble_AllModels_1_AutoML_5_20230529_222632 0.9486382 0.1753040\n#> 3 StackedEnsemble_BestOfFamily_3_AutoML_5_20230529_222632 0.9480953 0.1761551\n#> 4                          GBM_3_AutoML_5_20230529_222632 0.9477224 0.1783497\n#> 5                          GBM_2_AutoML_5_20230529_222632 0.9475894 0.1781328\n#> 6                          GBM_4_AutoML_5_20230529_222632 0.9473165 0.1786297\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7420452            0.1620090 0.2287572 0.05232986\n#> 2 0.7404240            0.1657728 0.2290282 0.05245390\n#> 3 0.7418812            0.1525689 0.2289615 0.05242337\n#> 4 0.7483486            0.1436028 0.2298426 0.05282762\n#> 5 0.7495287            0.1650536 0.2303489 0.05306062\n#> 6 0.7362912            0.1741573 0.2303375 0.05305536\n#> \n#> [16 rows x 7 columns]\n```\n:::\n\n```{.r .cell-code}\n##                                              model_id       auc   logloss     aucpr mean_per_class_error      rmse        mse\n## 1 StackedEnsemble_BestOfFamily_AutoML_20200820_190823 0.8585439 0.2992854 0.5869929            0.2406915 0.2978416 0.08870964\n## 2          GBM_grid__1_AutoML_20200820_190823_model_3 0.8494016 0.3137896 0.5165541            0.2386968 0.3098134 0.09598435\n## 3 DeepLearning_grid__1_AutoML_20200820_190823_model_1 0.8479056 0.3066365 0.6154288            0.2583112 0.3071528 0.09434283\n## 4      XGBoost_grid__1_AutoML_20200820_190823_model_5 0.8439162 0.3057109 0.5299331            0.2061170 0.3071419 0.09433613\n## 5    StackedEnsemble_AllModels_AutoML_20200820_190823 0.8425864 0.3211612 0.5205591            0.2539894 0.3107399 0.09655928\n## 6      XGBoost_grid__1_AutoML_20200820_190823_model_6 0.8257979 0.3211936 0.5009608            0.2536569 0.3111129 0.09679122\n##\n## [30 rows x 7 columns] \n\nautoml_models_h2o@leader\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_2_AutoML_5_20230529_222632 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)              6/9\n#> 3           # GBM base models (used / total)              3/5\n#> 4           # DRF base models (used / total)              2/2\n#> 5  # DeepLearning base models (used / total)              0/1\n#> 6           # GLM base models (used / total)              1/1\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02498378\n#> RMSE:  0.1580626\n#> LogLoss:  0.09347099\n#> Mean Per-Class Error:  0.07494071\n#> AUC:  0.9911699\n#> AUCPR:  0.949051\n#> Gini:  0.9823398\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8646  144 0.016382  =144/8790\n#> Yes     161 1045 0.133499  =161/1206\n#> Totals 8807 1189 0.030512  =305/9996\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.443668    0.872651 171\n#> 2                       max f2  0.267591    0.898512 222\n#> 3                 max f0point5  0.586138    0.906551 134\n#> 4                 max accuracy  0.489437    0.970188 158\n#> 5                max precision  0.980577    1.000000   0\n#> 6                   max recall  0.024387    1.000000 347\n#> 7              max specificity  0.980577    1.000000   0\n#> 8             max absolute_mcc  0.486149    0.856080 159\n#> 9   max min_per_class_accuracy  0.232494    0.949420 233\n#> 10 max mean_per_class_accuracy  0.221009    0.951446 236\n#> 11                     max tns  0.980577 8790.000000   0\n#> 12                     max fns  0.980577 1203.000000   0\n#> 13                     max fps  0.000136 8790.000000 399\n#> 14                     max tps  0.024387 1206.000000 347\n#> 15                     max tnr  0.980577    1.000000   0\n#> 16                     max fnr  0.980577    0.997512   0\n#> 17                     max fpr  0.000136    1.000000 399\n#> 18                     max tpr  0.024387    1.000000 347\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04910621\n#> RMSE:  0.2215992\n#> LogLoss:  0.1655987\n#> Mean Per-Class Error:  0.1307269\n#> AUC:  0.95272\n#> AUCPR:  0.7587615\n#> Gini:  0.90544\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     1991 113 0.053707  =113/2104\n#> Yes      59 225 0.207746    =59/284\n#> Totals 2050 338 0.072027  =172/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.281477    0.723473 198\n#> 2                       max f2  0.171730    0.798212 244\n#> 3                 max f0point5  0.535717    0.740582 128\n#> 4                 max accuracy  0.535717    0.933417 128\n#> 5                max precision  0.966055    1.000000   0\n#> 6                   max recall  0.001799    1.000000 392\n#> 7              max specificity  0.966055    1.000000   0\n#> 8             max absolute_mcc  0.281477    0.685843 198\n#> 9   max min_per_class_accuracy  0.149576    0.894366 254\n#> 10 max mean_per_class_accuracy  0.149576    0.898704 254\n#> 11                     max tns  0.966055 2104.000000   0\n#> 12                     max fns  0.966055  283.000000   0\n#> 13                     max fps  0.000109 2104.000000 399\n#> 14                     max tps  0.001799  284.000000 392\n#> 15                     max tnr  0.966055    1.000000   0\n#> 16                     max fnr  0.966055    0.996479   0\n#> 17                     max fpr  0.000109    1.000000 399\n#> 18                     max tpr  0.001799    1.000000 392\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04964806\n#> RMSE:  0.2228184\n#> LogLoss:  0.1666878\n#> Mean Per-Class Error:  0.1503574\n#> AUC:  0.9536507\n#> AUCPR:  0.7552905\n#> Gini:  0.9073015\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     11615  554 0.045526  =554/12169\n#> Yes      418 1220 0.255189   =418/1638\n#> Totals 12033 1774 0.070399  =972/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.363556     0.715123 198\n#> 2                       max f2  0.128830     0.781334 283\n#> 3                 max f0point5  0.640703     0.734549 113\n#> 4                 max accuracy  0.465968     0.932788 164\n#> 5                max precision  0.981750     1.000000   0\n#> 6                   max recall  0.000102     1.000000 399\n#> 7              max specificity  0.981750     1.000000   0\n#> 8             max absolute_mcc  0.363556     0.675733 198\n#> 9   max min_per_class_accuracy  0.120901     0.889499 287\n#> 10 max mean_per_class_accuracy  0.128830     0.890144 283\n#> 11                     max tns  0.981750 12169.000000   0\n#> 12                     max fns  0.981750  1636.000000   0\n#> 13                     max fps  0.000102 12169.000000 399\n#> 14                     max tps  0.000102  1638.000000 399\n#> 15                     max tnr  0.981750     1.000000   0\n#> 16                     max fnr  0.981750     0.998779   0\n#> 17                     max fpr  0.000102     1.000000 399\n#> 18                     max tpr  0.000102     1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.930918  0.004082   0.936265   0.927133   0.934159   0.927594\n#> auc         0.953698  0.004740   0.955990   0.951231   0.955840   0.946714\n#> err         0.069082  0.004082   0.063735   0.072867   0.065841   0.072406\n#> err_count 190.800000 12.498000 171.000000 199.000000 186.000000 201.000000\n#> f0point5    0.705107  0.027312   0.706320   0.671866   0.747161   0.694683\n#>           cv_5_valid\n#> accuracy    0.929441\n#> auc         0.958716\n#> err         0.070559\n#> err_count 197.000000\n#> f0point5    0.705505\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.697850  0.037315   0.693009   0.658824   0.759878\n#> r2                  0.524626  0.025436   0.539328   0.495853   0.549358\n#> recall              0.738886  0.028702   0.765101   0.729642   0.700280\n#> residual_deviance 920.070700 56.579730 833.578200 918.379640 947.109700\n#> rmse                0.222662  0.006055   0.213269   0.224281   0.223051\n#> specificity         0.956834  0.006660   0.957652   0.952145   0.967990\n#>                   cv_4_valid cv_5_valid\n#> precision           0.686441   0.691099\n#> r2                  0.498373   0.540216\n#> recall              0.729730   0.769679\n#> residual_deviance 987.526700 913.759200\n#> rmse                0.230120   0.222589\n#> specificity         0.954564   0.951817\n```\n:::\n\n```{.r .cell-code}\nsource(\"extract_h2o_model_name_by_position.R\")\n\nmodel <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(6) %>% \n  h2o.getModel()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> GBM_4_AutoML_5_20230529_222632\n```\n:::\n\n```{.r .cell-code}\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: gbm\n#> Model ID:  GBM_4_AutoML_5_20230529_222632 \n#> Model Summary: \n#>   number_of_trees number_of_internal_trees model_size_in_bytes min_depth\n#> 1              59                       59              117530        10\n#>   max_depth mean_depth min_leaves max_leaves mean_leaves\n#> 1        10   10.00000         66        269   153.69492\n#> \n#> \n#> H2OBinomialMetrics: gbm\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02428358\n#> RMSE:  0.1558319\n#> LogLoss:  0.09432899\n#> Mean Per-Class Error:  0.08201799\n#> AUC:  0.9912051\n#> AUCPR:  0.9519881\n#> Gini:  0.9824103\n#> R^2:  0.767757\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     12045  124 0.010190  =124/12169\n#> Yes      252 1386 0.153846   =252/1638\n#> Totals 12297 1510 0.027233  =376/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.455837     0.880559 173\n#> 2                       max f2  0.210072     0.897999 246\n#> 3                 max f0point5  0.513139     0.915172 158\n#> 4                 max accuracy  0.455837     0.972767 173\n#> 5                max precision  0.986519     1.000000   0\n#> 6                   max recall  0.022267     1.000000 358\n#> 7              max specificity  0.986519     1.000000   0\n#> 8             max absolute_mcc  0.455837     0.866132 173\n#> 9   max min_per_class_accuracy  0.195449     0.950694 252\n#> 10 max mean_per_class_accuracy  0.169686     0.952501 263\n#> 11                     max tns  0.986519 12169.000000   0\n#> 12                     max fns  0.986519  1635.000000   0\n#> 13                     max fps  0.001601 12169.000000 399\n#> 14                     max tps  0.022267  1638.000000 358\n#> 15                     max tnr  0.986519     1.000000   0\n#> 16                     max fnr  0.986519     0.998168   0\n#> 17                     max fpr  0.001601     1.000000 399\n#> 18                     max tpr  0.022267     1.000000 358\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: gbm\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.05083457\n#> RMSE:  0.2254652\n#> LogLoss:  0.1716251\n#> Mean Per-Class Error:  0.1603318\n#> AUC:  0.9505051\n#> AUCPR:  0.7451983\n#> Gini:  0.9010101\n#> R^2:  0.5148638\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2022  82 0.038973   =82/2104\n#> Yes      80 204 0.281690    =80/284\n#> Totals 2102 286 0.067839  =162/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.310763    0.715789 167\n#> 2                       max f2  0.106731    0.789312 260\n#> 3                 max f0point5  0.469266    0.733051 130\n#> 4                 max accuracy  0.329167    0.933417 162\n#> 5                max precision  0.977942    1.000000   0\n#> 6                   max recall  0.004141    1.000000 390\n#> 7              max specificity  0.977942    1.000000   0\n#> 8             max absolute_mcc  0.329167    0.677983 162\n#> 9   max min_per_class_accuracy  0.117798    0.890845 253\n#> 10 max mean_per_class_accuracy  0.106731    0.896619 260\n#> 11                     max tns  0.977942 2104.000000   0\n#> 12                     max fns  0.977942  283.000000   0\n#> 13                     max fps  0.001562 2104.000000 399\n#> 14                     max tps  0.004141  284.000000 390\n#> 15                     max tnr  0.977942    1.000000   0\n#> 16                     max fnr  0.977942    0.996479   0\n#> 17                     max fpr  0.001562    1.000000 399\n#> 18                     max tpr  0.004141    1.000000 390\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: gbm\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.05101826\n#> RMSE:  0.2258722\n#> LogLoss:  0.1726605\n#> Mean Per-Class Error:  0.1594387\n#> AUC:  0.9503779\n#> AUCPR:  0.7419725\n#> Gini:  0.9007559\n#> R^2:  0.5120723\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     11654  515 0.042321  =515/12169\n#> Yes      453 1185 0.276557   =453/1638\n#> Totals 12107 1700 0.070109  =968/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.335878     0.710006 200\n#> 2                       max f2  0.124106     0.773725 280\n#> 3                 max f0point5  0.568610     0.725008 131\n#> 4                 max accuracy  0.479121     0.931629 157\n#> 5                max precision  0.984883     1.000000   0\n#> 6                   max recall  0.005079     1.000000 390\n#> 7              max specificity  0.984883     1.000000   0\n#> 8             max absolute_mcc  0.335878     0.670296 200\n#> 9   max min_per_class_accuracy  0.098672     0.884296 294\n#> 10 max mean_per_class_accuracy  0.093678     0.886287 297\n#> 11                     max tns  0.984883 12169.000000   0\n#> 12                     max fns  0.984883  1634.000000   0\n#> 13                     max fps  0.001544 12169.000000 399\n#> 14                     max tps  0.005079  1638.000000 390\n#> 15                     max tnr  0.984883     1.000000   0\n#> 16                     max fnr  0.984883     0.997558   0\n#> 17                     max fpr  0.001544     1.000000 399\n#> 18                     max tpr  0.005079     1.000000 390\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                               mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> accuracy                  0.928876  0.006999   0.937726   0.932295   0.919232\n#> auc                       0.949949  0.006937   0.961131   0.951058   0.947536\n#> err                       0.071124  0.006999   0.062274   0.067705   0.080768\n#> err_count               196.400000 19.295076 172.000000 187.000000 223.000000\n#> f0point5                  0.695500  0.041052   0.762332   0.689862   0.651507\n#> f1                        0.713728  0.027004   0.759777   0.710974   0.695771\n#> f2                        0.733756  0.019284   0.757238   0.733418   0.746487\n#> lift_top_group            7.790870  0.649745   7.124206   8.675430   7.585165\n#> logloss                   0.173370  0.009351   0.164914   0.162399   0.184454\n#> max_per_class_error       0.251726  0.024930   0.244444   0.250814   0.215385\n#> mcc                       0.674837  0.029155   0.724019   0.673868   0.655482\n#> mean_per_class_accuracy   0.850732  0.010766   0.860292   0.852190   0.860904\n#> mean_per_class_error      0.149268  0.010766   0.139708   0.147810   0.139096\n#> mse                       0.051334  0.003285   0.049037   0.047526   0.055802\n#> pr_auc                    0.741453  0.038046   0.797196   0.752567   0.695379\n#> precision                 0.684212  0.050475   0.764045   0.676471   0.625000\n#> r2                        0.507858  0.039454   0.567392   0.518952   0.462694\n#> recall                    0.748274  0.024930   0.755556   0.749186   0.784615\n#> rmse                      0.226479  0.007232   0.221443   0.218005   0.236224\n#> specificity               0.953189  0.010082   0.965029   0.955193   0.937192\n#>                         cv_4_valid cv_5_valid\n#> accuracy                  0.929736   0.925389\n#> auc                       0.942597   0.947424\n#> err                       0.070264   0.074611\n#> err_count               194.000000 206.000000\n#> f0point5                  0.695831   0.677966\n#> f1                        0.709581   0.692537\n#> f2                        0.723885   0.707749\n#> lift_top_group            8.242703   7.326847\n#> logloss                   0.177222   0.177862\n#> max_per_class_error       0.266254   0.281734\n#> mcc                       0.670134   0.650683\n#> mean_per_class_accuracy   0.844724   0.835548\n#> mean_per_class_error      0.155276   0.164452\n#> mse                       0.051133   0.053174\n#> pr_auc                    0.741560   0.720562\n#> precision                 0.686956   0.668588\n#> r2                        0.505008   0.485247\n#> recall                    0.733746   0.718266\n#> rmse                      0.226126   0.230596\n#> specificity               0.955701   0.952830\n```\n:::\n:::\n\n#5. Predictions\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-41_3675d2e10c153de57ade7bfa72027a80'}\n\n```{.r .cell-code}\npredictions <- h2o.predict(model, newdata = as.h2o(test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\npredictions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   predict        No       Yes\n#> 1     Yes 0.5219059 0.4780941\n#> 2     Yes 0.4313832 0.5686168\n#> 3     Yes 0.5421739 0.4578261\n#> 4     Yes 0.4879769 0.5120231\n#> 5     Yes 0.3296910 0.6703090\n#> 6     Yes 0.6056297 0.3943703\n#> \n#> [2858 rows x 3 columns]\n```\n:::\n:::\n\n#6. Save the leader model\n\n::: {.cell hash='Challenge4_cache/html/unnamed-chunk-42_386592529b7281379ab9c08719859e46'}\n\n```{.r .cell-code}\nmodel %>% h2o.saveModel(path = \"04_Modeling/h20_models/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"C:\\\\Users\\\\tiend\\\\Documents\\\\GitHub\\\\ss23-bdml-tiend96\\\\content\\\\01_journal\\\\Challenge3\\\\04_Modeling\\\\h20_models\\\\GBM_4_AutoML_5_20230529_222632\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}